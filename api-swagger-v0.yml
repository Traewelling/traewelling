openapi: 3.0.0
info:
  description: "This is the REST API for Träwelling."
  version: 0.5.1
  title: "TRWL app API"
  contact:
    name: "Träwelling Dev Team"
    url: "https://github.com/traewelling/traewelling"
servers:
  - url: "https://testing.traewelling.de/api/v0"
  - url: "https://traewelling.de/api/v0"
  - url: "https://localhost:8000/api/v0"

tags:
  - name: "Auth"
    description: Login, register and logout
  - name: "User profile"
    description: Routes for editing the current user’s profile.
  - name: "Statuses"
    description: Query, add, update, and delete statuses
  - name: "Check-in"
    description: Routes required to complete a full check-in workflow.
  - name: "Notifications"
    description: Notifications to keep the user updated about current events.

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Log in with your user account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - email
              properties:
                email:
                  type: string
                  example: gertrud@traewelling.de
                  description: Email of the user to be logged in
                password:
                  type: string
                  example: thisisnotasecurepassword123
                  description: Password of the user to be logged in
      responses:
        200:
          description: Ok.
            The user has been authenticated and a session has been started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerToken'

        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register a account and log in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - email
                - password
                - confirm_password
              properties:
                username:
                  type: string
                  example: Gertrud123
                  description: Username of the user
                name:
                  type: string
                  example: Gertrud Musterfrau
                  description: Displayname of the user
                email:
                  type: string
                  example: gertrud@traewelling.de
                  description: Email of the user
                password:
                  type: string
                  example: thisisnotasecurepassword123
                  description: Password of the user to be logged in
                confirm_password:
                  type: string
                  example: thisisnotasecurepassword123
                  description: Password of the user to be logged in
      responses:
        200:
          description: Ok.
            The user has been authenticated and a session has been started.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BearerToken'
                  - type: object
                    properties:
                      message:
                        type: string
                        example: Registration successfull..
        400:
          $ref: '#/components/responses/BadRequestError'
  /auth/logout:
    post:
      security:
        - bearerAuth: []
      tags: [Auth]
      summary: Logs the user out and destroys the access token.
      responses:
        200:
          description: Ok.
            The user has been deauthenticated and the access token has been destroyed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out.
  /statuses/enroute/all/:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Retrieves a list of all active statuses.
      responses:
        200:
          description: OK.
            The returned array may be empty if there are no active statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /statuses/:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Retrieves the dashboard
      parameters:
        - in: query
          name: view
          schema:
            type: string
            enum: [global, personal, user]
            default: global
          description: Filters the list of statuses so that it will either return the
            global view (i.e. all public statuses == global dashboard), just the statuses
            of the current user’s follows (i.e. the user’s dashboard).
        - in: query
          name: username
          schema:
            $ref: '#/components/schemas/username'
          description: Only required if the “view” parameter is set to “user”. If that is
            the case this parameter takes the ID of the user to fetch statuses for.
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Needed to show next or previous page of pagination
      responses:
        200:
          description: OK.
            The returned array may be empty if there are no active statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/status_paginate'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /statuses/event/{id}:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Shows all statuses for a specific event.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/event_id'
          required: true
          description: The slug of the event to show.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/status_paginate'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
  /statuses/{id}:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Retrieves a single status.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to show.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
    put:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Update a status that the current user had posted previously.
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              maxLength: 280
        description: The new status text to set in the status with the given ID.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to modify.
      responses:
        200:
          description: OK.
            The status object has been modified on the server (i.e. the status text was
            changed). The response contains the modified version of the status.
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Status'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
    delete:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Removes a status that the current user had posted previously.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to delete.
      responses:
        204:
          description: No content.
            The status with the given ID has been deleted. Nothing further needs to be said, so
            the response will not have any content.
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
  /statuses/{id}/likes:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses, Likes]
      summary: Retrieves all likes for a specific status.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to show the likes for.
        - in: query
          name: page
          schema:
            type: integer
            example: 1
          description: Needed to show next or previous page of pagination
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/likes_paginate'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
  /statuses/{id}/like:
    post:
      security:
        - bearerAuth: []
      tags: [Statuses, Likes]
      summary: Creates a like for a status.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to like
      responses:
        200:
          description: OK.
          content:
            text/plain:
              schema:
                type: boolean
                example: true
                description: Returns true, if like has been created, false if there's already a like
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
    delete:
      security:
        - bearerAuth: []
      tags: [Statuses, Likes]
      summary: Deletes a like for a status.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/status_id'
          required: true
          description: The ID of the status to unlike
      responses:
        200:
          description: OK.
          content:
            text/plain:
              schema:
                type: boolean
                example: true
                description: Returns true, if like has been deleted, false if there was no like to delete
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'



  /trains/autocomplete/{query}:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves a list of stations.
      description: This endpoint can be called multiple times in succession when searching
        stations by name to provide suggestions for the user to select from. Please provide
        at least 3 characters when retrieving suggestions. Otherwise, only call this endpoint
        with less than 3 characters if the user explicitly requested a search.
      parameters:
        - in: path
          name: query
          schema:
            type: string
          required: true
          description: The ID of the status to modify.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/querystation'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /trains/stationboard:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves departures for a station.
      parameters:
        - in: query
          name: station
          schema:
            type: string
          required: true
          description: The name of the train station
        - in: query
          name: when
          schema:
            type: string
            example: 1575232872
          required: false
          description: The time of the query
        - in: query
          name: travelType
          schema:
            type: string
            enum: [nationalExpress, national, regionalExp, regional, suburban, bus, ferry, subway, tram, taxi]
          required: false
          description: Filter of transport types
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  station:
                    $ref: '#/components/schemas/querystation'
                  when:
                    type: number
                    description: UNIX-Timestamp
                    example: 1575230596
                  departures:
                    $ref: '#/components/schemas/db_rest_departure'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /trains/trip:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves departures for a station.
      parameters:
        - in: query
          name: tripID
          schema:
            type: string
            example: "1|463098|0|80|1122019"
          required: true
          description: Trip ID of the train
        - in: query
          name: lineName
          schema:
            type: string
            example: "S 32"
          required: true
          description: Linename of train
        - in: query
          name: start
          schema:
            type: string
            example: "8000191"
          required: true
          description: Starting point of the trip
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  station:
                    $ref: '#/components/schemas/querystation'
                  start:
                    type: string
                    example: "Karlsruhe Hbf"
                  destination:
                    type: string
                    example: "Menzingen(Baden)"
                  train:
                    $ref: '#/components/schemas/hafas_trip'
                  stopovers:
                    type: array
                    items:
                      $ref: '#/components/schemas/db_rest_stopover'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /trains/checkin:
    post:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Adds a train-status for the current user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tripID:
                  allOf:
                    - $ref: '#/components/schemas/trip_id'
                  required:
                    - tripID
                start:
                  allOf:
                    - $ref: '#/components/schemas/ibnr'
                  required:
                    - start
                destination:
                  allOf:
                    - $ref: '#/components/schemas/ibnr'
                  required:
                    - destintation
                body:
                  type: string
                  nullable: true
                  maxLength: 280
                  example: "This is my first checkin!"
                tweet:
                  type: boolean
                toot:
                  type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                    example: 16.152
                    description: Travel distance in kilometers
                  duration:
                    type: number
                    example: 900
                    description: Travel time in Seconds
                  statusId:
                    type: number
                    example: 34
                    description: ID of the generated Status
                  points:
                    type: number
                    example: 1
                  lineName:
                    type: string
                    example: "S 32"
                  alsoOnThisConnection:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: Array of users that are also on the same connection
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /trains/latest:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Shows the last 5 stations the logged in user arrived at.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/station'
  /trains/home:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves the home-station for logged in user.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/station'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
    put:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Sets the home-station for logged in user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ibnr:
                  type: number
                  example: 8123
                  required:
                    - ibnr
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Ost.Punkt 812 km"
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /trains/nearby:
    get:
      security:
        - bearerAuth: []
      tags: [Nearby]
      summary: Retrieves the nearest station from coordinates
      description: This endpoint queries the nearest station to given coordinates.
      parameters:
        - in: query
          name: latitude
          schema:
            type: number
            example: 48.994348
          required: true
          description: The latitude of the coordinates
        - in: query
          name: longitude
          schema:
            type: number
            example: 8.399583
          required: true
          description: The longitude of the coordinates
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  type:
                    type: string
                    example: "station"
                  id:
                    type: string
                    example: "8000191"
                  name:
                    type: string
                    example: "Karlsruhe Hbf"
                  location:
                    $ref: '#/components/schemas/hafas_location'
                  products:
                    $ref: '#/components/schemas/hafas_products'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
  /user/leaderboard:
    get:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Gets the current leaderboard for friends, kilometers and users.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  usersCount:
                    type: integer
                    example: 20
                  users:
                    $ref: '#/components/schemas/leaderboardarray'
                  friends:
                    $ref: '#/components/schemas/leaderboardarray'
                  kilometers:
                    $ref: '#/components/schemas/leaderboardarray'

        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /user/profilepicture:
    put:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Sets/updates the profile picture of the logged in user.
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
        description: An image to be used as the new avatar for the current user.
      responses:
        200:
          description: OK.
            The avatar was successfully uploaded.
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /user/displayname:
    put:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Updates the dipslay name of the current user.
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: The new display name to be used for the current user.
      responses:
        200:
          description: OK.
            The displayName of the current user was changed.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          $ref: '#/components/responses/BadRequestError'
        406:
          $ref: '#/components/responses/GDPRError'
  /user/accept_privacy:
    put:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Accepts the Privacy Agreement
      responses:
        202:
          description: OK.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "privacy agreement successfully accepted"
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /user/{username}:
    get:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Gets User profile
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/username'
          required: true
          description: The username of the requested user.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Userprofile'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /user/{username}/active:
    get:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Gets active status of user.
      parameters:
        - in: path
          name: username
          schema:
            $ref: '#/components/schemas/username'
          required: true
          description: The username of the requested user.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        204:
          description: No Content
        400:
          $ref: '#/components/responses/BadRequestError'
        406:
          $ref: '#/components/responses/GDPRError'
  /getuser:
    get:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Gets current user
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
  /notifications:
    get:
      security:
        - bearerAuth: []
      tags: [Notifications]
      description: Gets latest notifications for user
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/notifications'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        406:
          $ref: '#/components/responses/GDPRError'
    put:
      security:
        - bearerAuth: []
      tags: [Notifications]
      responses:
        201:
          description: new state = read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications'
        202:
          description: new state = unread
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'
    delete:
      security:
        - bearerAuth: []
      tags: [Notifications]
      responses:
        200:
          description: OK. Notification has been deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications'

        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        406:
          $ref: '#/components/responses/GDPRError'







components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized.
        Will be returned by the server if no user was logged in or wrong credentials were supplied.
    NotFoundError:
      description: Not found
        The parameters in the request were valid, but the server did not find a corresponding object.
    ForbiddenError:
      description: Forbidden
        The logged in user is not permitted to perform this action. (e.g. edit a status of another user.)
    BadRequestError:
      description: Bad Request
        The parameters are wrong or not given.
    GDPRError:
      description: Not Acceptable
        The privacy agreement has not yet been accepted.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Privacy agreement not yet accepted!"
              updated:
                type: string
                example: "2019-11-04 20:07:00"
                description: Date and time when the privacy agreement has been updated
              german:
                type: string
                description: German version of the privacy agreement in markdown.
              english:
                type: string
                description: English version of the privacy agreement in markdown.




  schemas:
    BearerToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImQxYjIzZGFlNTc0YzlhOTk3MzQ5MTQwMWZhNjRkMmU2MzgwNGQ4MWJhOTI0MjRlMmQ2ZmYyZjIyZjFiZmU1ZDUyOTExZjE0N2M4YWM5MTI3In0.eyJhdWQiOiIzIiwianRpIjoiZDFiMjNkYWU1NzRjOWE5OTczNDkxNDAxZmE2NGQyZTYzODA0ZDgxYmE5MjQyNGUyZDZmZjJmMjJmMWJmZTVkNTI5MTFmMTQ3YzhhYzkxMjciLCJpYXQiOjE1ODI5MDIyMDIsIm5iZiI6MTU4MjkwMjIwMiwiZXhwIjoxNjE0NTI0NjAyLCJzdWIiOiIxMCIsInNjb3BlcyI6W119.XWJcsbhgOQXqk-OrjKaRMRouo5AS4TkniyShH50O8K8KjaJYHP9Ltm3eMCpqarZpaBVucnsSKKimVVT9c1AD-Iq5n8AqZ3Mhgbh6Ik5-VqMAs89mLBwWj8seh_hgUmS0AqZMxUvkzZDpaU7Ub_EtoBUQ6l7up2tNXrA12mvg57LpvibWl6tXVLI2cBlEvNoTY3DPEjLFKMkdela7bhkoh4OAtJAnv1iNspuxcuhHp4PfgWlmaVGn4HdyfchNDJdSiWuiYy1LbRzpb9gdmmZtrDa--OfVRxodzE9sVIrLWXD_RRldejqyarbSke88ucMlALgCbBL88r00X2LEAXq565_s7ILbqEfVh1YN9ehfP8kCM9bf_Yop4G9QxgkO_xEhcv-Sj72rUph6TgS68QjEXculgizeVRTeCgW5X07UxCxy12jGuZMq3JjYU_kOmF1Sr79KSSZnFe27_f1kjbgEGSVwVKq_R4HcmM9ZGazpfbRPqaZnjUl3H5_0YAa7hZh0P1MYcJywx0tdY3inkZFBXhz1_3Xt6sULqlFRS4Lh0hP0o2E5jrCtVmeKGTgUvvbumEVyKpisjzpQK08i-rMSnYXSUbI6JNXc9z3PVgWzVt1lAdG66xNci7JQ3gdIoM4cQFBcGI8qQmfRMjvzXmmvoWY_hottmtOSK9AV_AP4zSw"
        expires_at:
          type: string
          example: "2021-10-01T12:00:00+02:00"
    notifications:
      type: object
      properties:
        id:
          type: string
          example: "87eed448-6ddc-44bc-97c6-bb4fe2c8d9e0"
        type:
          type: string
          enum:
            - "App\\Notifications\\MastodonNotSent"
            - "App\\Notifications\\StatusLiked"
            - "App\\Notifications\\TwitterNotSent"
            - "App\\Notifications\\UserFollowed"
            - "App\\Notifications\\UserJoinedConnection"
        notifiable_type:
          type: string
          enum:
            - "App\\User"
        notifiable_id:
          type: string
          example: "1"
        data:
          type: object
          oneOf:
            - $ref: '#/components/schemas/notification_mastodon_not_sent_data'
            - $ref: '#/components/schemas/notification_status_liked_data'
            - $ref: '#/components/schemas/notification_twitter_not_sent_data'
            - $ref: '#/components/schemas/notification_user_followed_data'
            - $ref: '#/components/schemas/notification_user_joined_connection_data'
        read_at:
          type: string
          nullable: true
          example: "2020-02-29 13:37:00"
        created_at:
          type: string
          example: "2020-02-29 13:37:00"
        updated_at:
          type: string
          example: "2020-02-29 13:37:00"
        detail:
          type: object
          oneOf:
            - $ref: '#/components/schemas/notification_mastodon_not_sent'
            - $ref: '#/components/schemas/notification_status_liked'
            - $ref: '#/components/schemas/notification_twitter_not_sent'
            - $ref: '#/components/schemas/notification_user_followed'
            - $ref: '#/components/schemas/notification_user_joined_connection'

    notification_mastodon_not_sent:
      type: object
      description: "App\\Notifications\\MastodonNotSent"
      properties:
        status:
          $ref: '#/components/schemas/Status'
    notification_mastodon_not_sent_data:
      type: object
      description: "App\\Notifications\\MastodonNotSent"
      properties:
        error:
          type: string
          additionalProperties: true
        status_id:
          $ref: '#/components/schemas/status_id'
    notification_twitter_not_sent:
      type: object
      description: "App\\Notifications\\TwitterNotSent"
      properties:
        status:
          $ref: '#/components/schemas/Status'
    notification_twitter_not_sent_data:
      type: object
      description: "App\\Notifications\\TwitterNotSent"
      properties:
        status:
          $ref: '#/components/schemas/Status'
    notification_status_liked:
      type: object
      description: "App\\Notifications\\StatusLiked"
      properties:
        follow:
          type: object
          properties:
            id:
              type: integer
              example: 2
            created_at:
              type: string
              example: "2020-02-29 13:37:00"
            updated_at:
              type: string
              example: "2020-02-29 13:37:00"
            user_id:
              type: string
              description: The user that created the follow.
              example: "10"
            follow:id:
              description: The user that is followed.
              type: string
              example: "1"
        sender:
          $ref: '#/components/schemas/User'
    notification_status_liked_data:
      type: object
      description: "App\\Notifications\\StatusLiked"
      properties:
        follow:
          type: object
          properties:
            status_id:
              $ref: '#/components/schemas/status_id'
            like_id:
              type: integer
              example: 1
            liked_by:
              type: integer
              example: 10
        sender:
          $ref: '#/components/schemas/User'
    notification_user_followed:
      type: object
      description: "App\\Notifications\\UserFollowed"
      properties:
        sender:
          $ref: '#/components/schemas/User'
        status:
          $ref: '#/components/schemas/Status'
    notification_user_followed_data:
      type: object
      description: "App\\Notifications\\UserFollowed"
      properties:
        follow_id:
          type: integer
          example: 1
    notification_user_joined_connection:
      type: object
      description: "App\\Notifications\\UserJoinedConnection"
      properties:
        status:
          $ref: '#/components/schemas/Status'
    notification_user_joined_connection_data:
      type: object
      description: "App\\Notifications\\UserJoinedConnection"
      properties:
        status_id:
          $ref: '#/components/schemas/status_id'
        linename:
          $ref: '#/components/schemas/linename'
        origin:
          type: string
          example: "Limurg Süd"
        destination:
          type: string
          example: "Ulm Hbf"
    status_paginate:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        first_page_url:
          type: string
          example: "https://api.traewelling.de/v0/statuses?page=1"
        from:
          type: integer
          example: 1
          description: Frist element on page
        next_page_url:
          type: string
          example: "https://api.traewelling.de/v0/statuses?page=2"
          nullable: true
        path:
          type: string
          example: "https://api.traewelling.de/v0/statuses"
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
          nullable: true
        to:
          type: integer
          example: 15
          description: Last element on page
    likes_paginate:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              created_at:
                $ref: '#/components/schemas/timestamp'
              updated_at:
                $ref: '#/components/schemas/timestamp'
              user_id:
                type: string
                example: "1"
              status_id:
                type: string
                example: "1"
              user:
                $ref: '#/components/schemas/User'
        first_page_url:
          type: string
          example: "https://api.traewelling.de/v0/statuses/1/likes?page=1"
        from:
          type: integer
          example: 1
          description: Frist element on page
        next_page_url:
          type: string
          example: "https://api.traewelling.de/v0/statuses/1/likes?page=2"
          nullable: true
        path:
          type: string
          example: "https://api.traewelling.de/v0/statuses"
        per_page:
          type: integer
          example: 15
        prev_page_url:
          type: string
          example: null
          nullable: true
        to:
          type: integer
          example: 15
          description: Last element on page
    Userprofile:
      type: object
      properties:
        username:
          $ref: '#/components/schemas/username'
        twitterUrl:
          $ref: '#/components/schemas/twitterUrl'
        mastodonUrl:
          $ref: '#/components/schemas/mastodonUrl'
        statuses:
          $ref: '#/components/schemas/status_paginate'
        user:
          $ref: '#/components/schemas/User'
    Status:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/status_id'
        created_at:
          $ref: '#/components/schemas/timestamp'
        updated_at:
          $ref: '#/components/schemas/timestamp'
        body:
          type: string
          maxLength: 280
          example: "This is my first checkin!"
          nullable: true
        type:
          type: string
          example: "hafas"
        event_id:
          type: integer
          nullable: true
          example: 1
        likes_count:
          type: integer
          example: "15"
          description: Show how many accounts liked this status
        favorited:
          type: boolean
          example: true
          description: Shows whether the user has liked this status.
        user:
          $ref: '#/components/schemas/User'
        train_checkin:
          $ref: '#/components/schemas/train_checkin'
        event:
          $ref: '#/components/schemas/event'
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        name:
          type: string
          example: "J. Doe"
        username:
          type: string
          example: "jdoe"
        train_distance:
          type: number
          format: float
          example: 454.59
        train_duration:
          type: integer
          example: 317
        points:
          type: integer
          example: 66
    db_rest_stopover:
      type: object
      properties:
        stop:
          type: object
          properties:
            type:
              type: string
              example: "stop"
            id:
              type: string
              example: "8000191"
            name:
              type: string
              example: "Karlsruhe Hbf"
            location:
              $ref: '#/components/schemas/hafas_location'
            products:
              $ref: '#/components/schemas/hafas_products'
        arrival:
          type: string
          example: "2019-12-01T21:56:00+01:00"
        arrivalDelay:
          type: string
          example: "60"
        arrivalPlattform:
          type: string
          example: "1"
        departure:
          type: string
          example: "2019-12-01T21:56:00+01:00"
        departureDelay:
          type: string
          example: "60"
        departurePlatform:
          type: string
          example: "1"
    db_rest_departure:
      type: object
      properties:
        trip_id:
          $ref: '#/components/schemas/trip_id'
        stop:
          type: object
          properties:
            type:
              type: string
              example: "stop"
            id:
              $ref: '#/components/schemas/ibnr'
            name:
              type: string
              description: Name of Station
              example: "Karlsruhe Bahnhofsvorplatz"
            location:
              $ref: '#/components/schemas/hafas_location'
            products:
              $ref: '#/components/schemas/hafas_products'
            station:
              type: object
              properties:
                type:
                  type: string
                  example: "station"
                id:
                  type: string
                  example: "8000191"
                name:
                  type: string
                  example: "Karlsruhe Hbf"
                location:
                  $ref: '#/components/schemas/hafas_location'
                products:
                  $ref: '#/components/schemas/hafas_products'
            when:
              type: string
              example: "2019-12-01T21:03:00+01:00"
            directoin:
              type: string
              example: "3 Tivoli"
            line:
              type: object
              properties:
                type:
                  type: string
                  example: "line"
                id:
                  type: string
                  example: "re-6"
                fahrtNr:
                  type: string
                  example: "12042"
                name:
                  type: string
                  example: "RE 6"
                public:
                  type: boolean
                  example: true
                operator:
                  type: object
                  properties:
                    type:
                      type: string
                      example: "operator"
                    id:
                      type: string
                      example: "db-regio-ag-mitte"
                    name:
                      type: string
                      example: "DB Regio AG Mitte"
                additionalName:
                  type: string
                  example: "RE 6"
            remarks:
              type: string
              description: actually array but almost always empty. Don't know what it does.
            delay:
              type: integer
              example: "60"
              description: Delay in seconds
              nullable: true
            platform:
              type: string
    hafas_location:
      type: object
      properties:
        type:
          type: string
          example: "location"
        id:
          $ref: '#/components/schemas/ibnr'
        latitude:
          type: number
          example: 48.994348
        longitude:
          type: number
          example: 8.399583
    hafas_products:
      type: object
      properties:
        nationalExpress:
          type: boolean
        national:
          type: boolean
        regionalExp:
          type: boolean
        regional:
          type: boolean
        suburban:
          type: boolean
        bus:
          type: boolean
        ferry:
          type: boolean
        subway:
          type: boolean
        tram:
          type: boolean
        taxi:
          type: boolean
    train_checkin:
      type: object
      properties:
        id:
          type: integer
        status_id:
          $ref: '#/components/schemas/status_id'
        trip_id:
          $ref: '#/components/schemas/trip_id'
        origin:
          $ref: '#/components/schemas/station'
        destination:
          $ref: '#/components/schemas/station'
        distance:
          type: number
          format: float
          example: "3.606"
        departure:
          $ref: '#/components/schemas/timestamp'
        arrival:
          $ref: '#/components/schemas/timestamp'
        points:
          type: integer
          example: "3"
        delay:
          type: integer
          example: "0"
          nullable: true
        hafas_trip:
          $ref: '#/components/schemas/hafas_trip'
    hafas_trip:
      type: object
      properties:
        id:
          type: number
          example: 16
        trip_id:
          $ref: '#/components/schemas/trip_id'
        category:
          $ref: '#/components/schemas/category'
        number:
          $ref: '#/components/schemas/number'
        linename:
          $ref: '#/components/schemas/linename'
        origin:
          $ref: '#/components/schemas/ibnr'
        destination:
          $ref: '#/components/schemas/ibnr'
        stopovers:
          type: string
          example: "[{\"stop\":{\"type\":\"stop\",\"id\":\"8079041\",\"name\":\"Karlsruhe Bahnhofsvorplatz\",\"location\":{\"type\":\"location\",\"id\":\"8079041\",\"latitude\":48.994348,\"longitude\":8.399583},\"products\":{\"nationalExpress\":true,\"national\":true,\"regionalExp\":true,\"regional\":true,\"suburban\":true,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":true}},\"arrival\":null,\"arrivalDelay\":null,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:50:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null,\"remarks\":[{\"type\":\"hint\",\"code\":\"text.journeystop.product.or.direction.changes.stop.message\",\"text\":\"As Bus 62 heading towards 62 Entenfang >70 from here\"}]},{\"stop\":{\"type\":\"stop\",\"id\":\"362191\",\"name\":\"Ebertstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"362191\",\"latitude\":48.994519,\"longitude\":8.395395},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":true,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":false}},\"arrival\":\"2019-11-24T15:51:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:51:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"377218\",\"name\":\"Welfenstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"377218\",\"latitude\":48.99531,\"longitude\":8.386118},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":false}},\"arrival\":\"2019-11-24T15:53:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:53:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721329\",\"name\":\"Beiertheim West, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721329\",\"latitude\":48.994896,\"longitude\":8.382693},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T15:54:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:54:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721468\",\"name\":\"Windeckstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721468\",\"latitude\":48.99122,\"longitude\":8.371016},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":true}},\"arrival\":\"2019-11-24T15:55:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:55:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"723868\",\"name\":\"Hardecksiedlung, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"723868\",\"latitude\":48.992262,\"longitude\":8.368813},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":false}},\"arrival\":\"2019-11-24T15:56:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:56:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721437\",\"name\":\"Schwimmschulweg, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721437\",\"latitude\":48.994653,\"longitude\":8.364247},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T15:57:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:57:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721380\",\"name\":\"Hornisgrindestra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721380\",\"latitude\":48.995966,\"longitude\":8.360409},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T15:58:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:58:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721349\",\"name\":\"Edelbergstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721349\",\"latitude\":48.996865,\"longitude\":8.354071},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T15:59:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T15:59:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721458\",\"name\":\"Wattkopfstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721458\",\"latitude\":48.994573,\"longitude\":8.351635},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:00:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:00:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721333\",\"name\":\"Bernsteinstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721333\",\"latitude\":48.991912,\"longitude\":8.348363},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:01:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:01:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721350\",\"name\":\"Eichelbergstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721350\",\"latitude\":48.99353,\"longitude\":8.345109},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:02:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:02:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721455\",\"name\":\"T\\u00dcV, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721455\",\"latitude\":48.996667,\"longitude\":8.348426},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:03:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:03:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"723629\",\"name\":\"St. Josef Kirche, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"723629\",\"latitude\":48.998851,\"longitude\":8.348615},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:04:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:04:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721346\",\"name\":\"Durmersheimer Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721346\",\"latitude\":49.000514,\"longitude\":8.350619},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:05:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:05:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"723802\",\"name\":\"Sinner (Durmersheimer Stra\\u00dfe), Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"723802\",\"latitude\":49.002663,\"longitude\":8.35506},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:06:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:06:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721415\",\"name\":\"Gr\\u00fcnwinkel Friedhof, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721415\",\"latitude\":49.005521,\"longitude\":8.356103},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:07:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:07:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721339\",\"name\":\"Blohnstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721339\",\"latitude\":49.007346,\"longitude\":8.356417},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:08:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:08:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null,\"remarks\":[{\"type\":\"hint\",\"code\":\"text.journeystop.product.or.direction.changes.stop.message\",\"text\":\"As Bus 62 heading towards 70 Heidehof from here\"}]},{\"stop\":{\"type\":\"stop\",\"id\":\"363851\",\"name\":\"Entenfang, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"363851\",\"latitude\":49.010609,\"longitude\":8.359501},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":true,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":true}},\"arrival\":\"2019-11-24T16:10:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:12:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null,\"remarks\":[{\"type\":\"hint\",\"code\":\"text.journeystop.product.or.direction.changes.stop.message\",\"text\":\"As Bus 70 heading towards 70 Heidehof from here\"}]},{\"stop\":{\"type\":\"stop\",\"id\":\"721398\",\"name\":\"K\\u00e4rcherstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721398\",\"latitude\":49.015895,\"longitude\":8.361559},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:14:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:14:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"373522\",\"name\":\"Hertzstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"373522\",\"latitude\":49.020246,\"longitude\":8.364984},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":false}},\"arrival\":\"2019-11-24T16:15:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:15:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721326\",\"name\":\"Barbaraweg, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721326\",\"latitude\":49.023967,\"longitude\":8.365946},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:15:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:15:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721410\",\"name\":\"Madenburgweg, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721410\",\"latitude\":49.027051,\"longitude\":8.36546},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:16:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:16:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721332\",\"name\":\"Berliner Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721332\",\"latitude\":49.03026,\"longitude\":8.364939},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:17:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:17:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721364\",\"name\":\"Germersheimer Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721364\",\"latitude\":49.032894,\"longitude\":8.364858},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:17:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:17:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721462\",\"name\":\"Wei\\u00dfenburger Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721462\",\"latitude\":49.036957,\"longitude\":8.366989},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:18:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:18:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721436\",\"name\":\"Schweigener Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721436\",\"latitude\":49.03844,\"longitude\":8.369586},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:19:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:19:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721385\",\"name\":\"Kaiserslauterner Stra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721385\",\"latitude\":49.036687,\"longitude\":8.374153},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:20:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:20:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721900\",\"name\":\"Neureut Flughafenstra\\u00dfe, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721900\",\"latitude\":49.036139,\"longitude\":8.380535},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:21:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:21:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"721172\",\"name\":\"Neureut Rosmarinweg, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"721172\",\"latitude\":49.035482,\"longitude\":8.385605},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":false,\"taxi\":false}},\"arrival\":\"2019-11-24T16:22:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":\"2019-11-24T16:22:00+01:00\",\"departureDelay\":0,\"departurePlatform\":null},{\"stop\":{\"type\":\"stop\",\"id\":\"377009\",\"name\":\"Heidehof, Karlsruhe\",\"location\":{\"type\":\"location\",\"id\":\"377009\",\"latitude\":49.031536,\"longitude\":8.387008},\"products\":{\"nationalExpress\":false,\"national\":false,\"regionalExp\":false,\"regional\":false,\"suburban\":false,\"bus\":true,\"ferry\":false,\"subway\":false,\"tram\":true,\"taxi\":false}},\"arrival\":\"2019-11-24T16:23:00+01:00\",\"arrivalDelay\":0,\"arrivalPlatform\":null,\"departure\":null,\"departureDelay\":null,\"departurePlatform\":null}]"
        polyline:
          $ref: '#/components/schemas/polyline'
        departure:
          $ref: '#/components/schemas/timestamp'
        arrival:
          $ref: '#/components/schemas/timestamp'
        delay:
          type: integer
          example: "0"
          nullable: true
    event:
      type: object
      nullable: true
      properties:
        id:
          $ref: '#/components/schemas/event_id'
        name:
          type: string
          example: "Weihnachten 2019"
        slug:
          $ref: '#/components/schemas/event_slug'
        hashtag:
          type: string
          example: "MerryTräwellingMas"
        host:
          type: string
          example: "Welt"
        url:
          type: string
          example: "https://www.weihnachten.de/"
        trainstation:
          $ref: '#/components/schemas/ibnr'
        begin:
          type: string
          example: "2019-12-24 00:00:00"
        end:
          type: string
          example: "2019-12-24 23:59:59"

    station:
      type: object
      properties:
        id:
          type: integer
          example: 3
        ibnr:
          $ref: '#/components/schemas/ibnr'
        name:
          type: string
          example: "Karlsruhe Bahnhofsvorplatz"
        latitude:
          type: number
          format: float
          example: "48.994348"
        longitude:
          type: number
          format: float
          example: 48.994348
    querystation:
      type: object
      properties:
        ibnr:
          $ref: '#/components/schemas/ibnr'
        name:
          type: string
          example: "Karlsruhe Bahnhofsvorplatz"
        provider:
          type: string
          example: "train"
    leaderboardarray:
      type: array
      items:
        type: object
        properties:
          username:
            $ref: '#/components/schemas/username'
          train_duration:
            type: string
            example: "90"
          train_distance:
            type: string
            example: "26711.37"
          points:
            type: string
            example: "1337"
    status_id:
      type: integer
      example: 10
    event_id:
      type: integer
      example: 1
    event_slug:
      type: string
      example: "weihnachten_2019"
    trip_id:
      type: string
      example: "1|1937395|17|80|24112019"
    userId:
      type: integer
      example: 1
    username:
      type: string
      example: "testuser"
    twitterUrl:
      type: string
      example: "https://twitter.com/traewelling"
    mastodonUrl:
      type: string
      example: "https://chaos.social/traewelling"
    timestamp:
      type: string
      pattern: "YYYY-MM-DD hh:mm:ss"
      example: "2019-11-24 15:44:16"
    ibnr:
      type: string
      example: "8079041"
    category:
      type: string
      example: "bus"
    number:
      type: string
      example: "bus-62"
    linename:
      type: string
      example: "62"
    polyline:
      type: string
      format: hash
      example: "cac715508e44ae253f424562fe5d286e"
