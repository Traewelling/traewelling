{
    "openapi": "3.0.0",
    "info": {
        "title": "Träwelling API",
        "description": "Träwelling user API description. This is an incomplete documentation with still many errors. The API is currently not yet stable. Endpoints are still being restructured. Both the URL and the request or body can be changed. Breaking changes will be announced on the Discord server: https://discord.gg/72t7564ZbV",
        "contact": {
            "email": "support@traewelling.de"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0 - alpha"
    },
    "servers": [
        {
            "url": "https://traewelling.de/api/v1",
            "description": "Production Server"
        },
        {
            "url": "http://localhost:8000/api/v1",
            "description": "This instance"
        }
    ],
    "paths": {
        "/auth/signup": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "register new user",
                "operationId": "registerUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "username": {
                                        "description": "Username",
                                        "type": "string",
                                        "maxLength": 25,
                                        "minLength": 3,
                                        "pattern": "^[a-zA-Z0-9_]*$",
                                        "example": "Gertrud123"
                                    },
                                    "name": {
                                        "type": "string",
                                        "maxLength": 50
                                    },
                                    "email": {
                                        "example": "mail@example.com"
                                    },
                                    "password": {
                                        "description": "password",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 8,
                                        "example": "thisisnotasecurepassword123"
                                    },
                                    "password_confirmation": {
                                        "description": "confirmation of the password-field.",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 8,
                                        "example": "thisisnotasecurepassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/BearerTokenResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Other (not specified) error occured"
                    },
                    "422": {
                        "description": "Username or email is already taken, or other input error"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Login with username & password",
                "operationId": "loginUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "login": {
                                        "description": "Username or email",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 8,
                                        "example": "gertrud@traewelling.de"
                                    },
                                    "password": {
                                        "description": "password",
                                        "type": "string",
                                        "maxLength": 255,
                                        "minLength": 8,
                                        "example": "thisisnotasecurepassword123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/BearerTokenResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Non-matching credentials"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout & invalidate current bearer token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "example": "success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error during revoke"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/auth/user": {
            "get": {
                "tags": [
                    "Auth",
                    "User"
                ],
                "summary": "Get authenticated user information",
                "description": "This request issues a new Bearer-Token with a new expiration date while also revoking the old\n     *      token.",
                "operationId": "getAuthenticatedUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserAuth"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/auth/refresh": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Bearer Token",
                "description": "This request issues a new Bearer-Token with a new expiration date while also revoking the old\n     *      token.",
                "operationId": "refreshToken",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/BearerTokenResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/event/{slug}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get basic information for event",
                "description": "Returns slug, name and duration for an event",
                "operationId": "getEvent",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Event"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/event/{slug}/details": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get additional information for event",
                "description": "Returns overall travelled distance and duration for an event",
                "operationId": "getEventDetails",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/EventDetails"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/event/{slug}/statuses": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get paginated statuses for event",
                "description": "Returns all for user visible statuses for an event",
                "operationId": "getEventStatuses",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Shows upcoming events with basic information",
                "description": "Returns slug, name and duration for an event",
                "operationId": "getUpcomingEvent",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Event"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/event": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Suggest a event",
                "description": "Submit a possible event for our administrators to publish",
                "operationId": "suggestEvent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventSuggestion"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/activeEvents": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "Shows current events with basic information",
                "description": "Returns array of current events, used for a basic overview during checkiused for a basic overview during checkin",
                "operationId": "getCurrentEvents",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Event"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/{id}/follow": {
            "post": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Follow a user",
                "operationId": "createFollow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Already following"
                    },
                    "403": {
                        "description": "User is blocked"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Unfollow a user",
                "operationId": "destroyFollow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Already following"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/settings/followers": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all followers",
                "operationId": "getFollowers",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Already following"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/settings/follow-requests": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all followers",
                "operationId": "getFollowRequests",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/settings/followings": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all users the current user is following",
                "operationId": "getFollowings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/removeFollower": {
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Remove a follower",
                "operationId": "removeFollower",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-unfollowed user",
                                        "format": "int64",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Follow not found"
                    },
                    "500": {
                        "description": "Unknown error"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/acceptFollowRequest": {
            "put": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Accept a follow request",
                "operationId": "acceptFollowRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the user who sent the follow request",
                                        "format": "int64",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Unknown error"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/rejectFollowRequest": {
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Reject a follow request",
                "operationId": "rejectFollowRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the user who sent the follow request",
                                        "format": "int64",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/status/{id}/likes": {
            "get": {
                "tags": [
                    "Likes"
                ],
                "summary": "[Auth optional] Get likes for status",
                "description": "Returns array of users that liked the status",
                "operationId": "getLikesForStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/status/{id}/like": {
            "post": {
                "tags": [
                    "Likes"
                ],
                "summary": "Add like to status",
                "description": "Add like to status",
                "operationId": "addLikeToStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "409": {
                        "description": "Status already liked by user"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "delete": {
                "tags": [
                    "Likes"
                ],
                "summary": "Remove like from status",
                "description": "Removes like from status",
                "operationId": "removeLikeFromStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/static/privacy": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get the current privacy policy",
                "description": "Get the current privacy policy",
                "operationId": "e649bec35ba50765db023e745233eda9",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "validFrom": {
                                                    "example": "2022-01-05T16:26:14.000000Z"
                                                },
                                                "en": {
                                                    "example": "This is the english privacy policy"
                                                },
                                                "de": {
                                                    "example": "Dies ist die deutsche Datenschutzerklärung"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/settings/acceptPrivacy": {
            "post": {
                "tags": [
                    "Settings"
                ],
                "summary": "Accept the current privacy policy",
                "description": "Accept the current privacy policy",
                "operationId": "4baaf2c20fed6c12e13df7493ffa62ad",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Already accepted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/leaderboard": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get array of 20 best users",
                "operationId": "getLeaderboard",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUser"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/leaderboard/distance": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get leaderboard array sorted by distance",
                "operationId": "getLeaderboardByDistance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUser"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/leaderboard/friends": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "Get friends-leaderboard array sorted",
                "operationId": "getLeaderboardByFriends",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUser"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/leaderboard/{month}": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get leaderboard array for a specific month",
                "operationId": "getMonthlyLeaderboard",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month for the complete leaderboard in Format `YYYY-MM`",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2022-04"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUser"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/statistics": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get personal statistics",
                "operationId": "getStatistics",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "purpose": {
                                                    "description": "The purpose of travel",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "$ref": "#/components/schemas/BusinessEnum"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 11
                                                            },
                                                            "duration": {
                                                                "description": "Duration in\n     *                                                            minutes",
                                                                "type": "integer",
                                                                "example": 425
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "categories": {
                                                    "description": "The categories of the travel",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "$ref": "#/components/schemas/TrainCategoryEnum"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 11
                                                            },
                                                            "duration": {
                                                                "description": "Duration in\n     *                                                          minutes",
                                                                "type": "integer",
                                                                "example": 425
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "operators": {
                                                    "description": "The operators of the means of transport",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "example": "Gertruds Verkehrsgesellschaft mbH"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "duration": {
                                                                "description": "Duration in\n     *                                                          minutes",
                                                                "type": "integer",
                                                                "example": 424
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "time": {
                                                    "description": "Shows the daily travel volume",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "date": {
                                                                "type": "string",
                                                                "example": "2021-01-01T00:00:00.000Z"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "duration": {
                                                                "description": "Duration in\n     *                                                          minutes",
                                                                "type": "integer",
                                                                "example": 424
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "meta": {
                                            "properties": {
                                                "from": {
                                                    "example": "2021-01-01T00:00:00.000000Z"
                                                },
                                                "until": {
                                                    "example": "2021-02-01T00:00:00.000000Z"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/statistics/global": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get global statistics of the last 4 weeks",
                "operationId": "getGlobalStatistics",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "distance": {
                                                    "description": "Globally travelled distance in meters",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "duration": {
                                                    "description": "Globally travelled duration in minutes",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "activeUsers": {
                                                    "description": "Number of active users",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "meta": {
                                                    "properties": {
                                                        "from": {
                                                            "example": "2021-01-01T00:00:00.000000Z"
                                                        },
                                                        "until": {
                                                            "example": "2021-02-01T00:00:00.000000Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/dashboard": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated statuses of personal dashboard",
                "description": "Returns paginated statuses of personal dashboard",
                "operationId": "getDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/dashboard/global": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated statuses of global dashboard",
                "description": "Returns paginated statuses of global dashboard",
                "operationId": "getGlobalDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/dashboard/future": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated future statuses of current user",
                "description": "Returns paginated statuses of the authenticated user, that are more than 20 minutes in the\n     *      future",
                "operationId": "getFutureDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statuses": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get active statuses",
                "description": "Returns all currently active statuses that are visible to the (un)authenticated user",
                "operationId": "getActiveStatuses",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/status/{id}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get single statuses",
                "description": "Returns a single status Object, if user is authorized to see it",
                "operationId": "getSingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Status"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "put": {
                "tags": [
                    "Status"
                ],
                "summary": "Update a status",
                "description": "Updates a single status Object, if user is authorized to",
                "operationId": "updateSingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StatusUpdateBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Status"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "delete": {
                "tags": [
                    "Status"
                ],
                "summary": "Destroy a status",
                "description": "Deletes a single status Object, if user is authorized to",
                "operationId": "destroySingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/polyline/{ids}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get GeoJSON for statuses",
                "description": "Returns GeoJSON for all requested status IDs",
                "operationId": "getPolylines",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "comma seperated status IDs",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1337,1338"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "type": {
                                                    "example": "FeatureCollection"
                                                },
                                                "features": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Polyline"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/stopovers/{ids}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get stopovers for statuses",
                "description": "Returns all underway-stops for stations",
                "operationId": "getStopOvers",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "comma seperated trip IDs",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Stopovers"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/statuses/active": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "User state",
                "description": "This request returns whether the currently logged-in user has an active check-in or not.",
                "operationId": "userState",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Status"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No active checkin"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/station/{name}/departures": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Get departures from a station",
                "description": "Get departures from a station",
                "operationId": "getDepartures",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the station (replace slashes with spaces)",
                        "required": true
                    },
                    {
                        "name": "when",
                        "in": "query",
                        "description": "When to get the departures (default: now)",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-01-01T12:00:00.000Z"
                        }
                    },
                    {
                        "name": "travelType",
                        "in": "query",
                        "description": "Means of transport (default: all)",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/TravelTypeEnum"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "description": "HAFAS Train model. This model might be subject to unexpected changes. See also\n     *                     external documentation at\n     *                     [https://v5.db.transport.rest/api.html#get-stopsiddepartures](https://v5.db.transport.rest/api.html#get-stopsiddepartures).",
                                                "externalDocs": "https://v5.db.transport.rest/api.html#get-stopsiddepartures",
                                                "example": {
                                                    "tripId": "1|200513|0|81|6012023",
                                                    "stop": {
                                                        "type": "stop",
                                                        "id": "8000191",
                                                        "name": "Karlsruhe Hbf",
                                                        "location": {
                                                            "type": "location",
                                                            "id": "8000191",
                                                            "latitude": 48.99353,
                                                            "longitude": 8.401939
                                                        },
                                                        "products": {
                                                            "nationalExpress": true,
                                                            "national": true,
                                                            "regionalExp": true,
                                                            "regional": true,
                                                            "suburban": true,
                                                            "bus": true,
                                                            "ferry": false,
                                                            "subway": false,
                                                            "tram": true,
                                                            "taxi": true
                                                        }
                                                    },
                                                    "when": "2023-01-06T13:49:00+01:00",
                                                    "plannedWhen": "2023-01-06T13:49:00+01:00",
                                                    "delay": null,
                                                    "platform": "2",
                                                    "plannedPlatform": "2",
                                                    "direction": "Zürich HB",
                                                    "provenance": null,
                                                    "line": {
                                                        "type": "line",
                                                        "id": "ec-9",
                                                        "fahrtNr": "9",
                                                        "name": "EC 9",
                                                        "public": true,
                                                        "adminCode": "80____",
                                                        "productName": "EC",
                                                        "mode": "train",
                                                        "product": "national",
                                                        "operator": {
                                                            "type": "operator",
                                                            "id": "db-fernverkehr-ag",
                                                            "name": "DB Fernverkehr AG"
                                                        }
                                                    },
                                                    "remarks": null,
                                                    "origin": null,
                                                    "destination": {
                                                        "type": "stop",
                                                        "id": "8503000",
                                                        "name": "Zürich HB",
                                                        "location": {
                                                            "type": "location",
                                                            "id": "8503000",
                                                            "latitude": 47.378177,
                                                            "longitude": 8.540211
                                                        },
                                                        "products": {
                                                            "nationalExpress": true,
                                                            "national": true,
                                                            "regionalExp": true,
                                                            "regional": true,
                                                            "suburban": true,
                                                            "bus": true,
                                                            "ferry": false,
                                                            "subway": false,
                                                            "tram": true,
                                                            "taxi": false
                                                        }
                                                    },
                                                    "currentTripPosition": {
                                                        "type": "location",
                                                        "latitude": 48.725382,
                                                        "longitude": 8.142888
                                                    },
                                                    "loadFactor": "high",
                                                    "station": {
                                                        "id": 5181,
                                                        "ibnr": 8000191,
                                                        "rilIdentifier": "RK",
                                                        "name": "Karlsruhe Hbf",
                                                        "latitude": "48.993530",
                                                        "longitude": "8.401939"
                                                    }
                                                }
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "station": {
                                                    "$ref": "#/components/schemas/TrainStation"
                                                },
                                                "times": {
                                                    "properties": {
                                                        "now": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T12:00:00.000Z"
                                                        },
                                                        "prev": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T11:45:00.000Z"
                                                        },
                                                        "next": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T12:15:00.000Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Station not found"
                    },
                    "502": {
                        "description": "Error with our data provider"
                    },
                    "422": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/trip": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Get the stopovers and trip information for a given train",
                "operationId": "getTrainTrip",
                "parameters": [
                    {
                        "name": "hafasTripId",
                        "in": "query",
                        "description": "HAFAS trip ID (fetched from departures)",
                        "required": true,
                        "example": "1|323306|1|80|17072022"
                    },
                    {
                        "name": "lineName",
                        "in": "query",
                        "description": "line name for that train",
                        "required": true,
                        "example": "S 4"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "start point from where the stopovers should be desplayed",
                        "required": true,
                        "example": 4711
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "int64",
                                                    "example": 1
                                                },
                                                "category": {
                                                    "$ref": "#/components/schemas/TrainCategoryEnum"
                                                },
                                                "number": {
                                                    "type": "string",
                                                    "example": "4-a6s4-4"
                                                },
                                                "lineName": {
                                                    "type": "string",
                                                    "example": "S 4"
                                                },
                                                "origin": {
                                                    "$ref": "#/components/schemas/TrainStation"
                                                },
                                                "destination": {
                                                    "$ref": "#/components/schemas/TrainStation"
                                                },
                                                "stopovers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/TrainStopover"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No station found"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/station/nearby": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Location based search for trainstations",
                "description": "Returns the nearest station to the given coordinates",
                "operationId": "trainStationsNearby",
                "parameters": [
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "latitude",
                        "required": true,
                        "example": 48.991
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "longitude",
                        "required": true,
                        "example": 8.4005
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TrainStation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No station found"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/checkin": {
            "post": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Create a checkin",
                "operationId": "createTrainCheckin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TrainCheckinRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TrainCheckinResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Checkin collision"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/station/{name}/home": {
            "put": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Set a station as home station",
                "operationId": "setHomeStation",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the station",
                        "required": true,
                        "example": "Karlsruhe Hbf"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/TrainStation"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Station not found"
                    },
                    "502": {
                        "description": "Error with our data provider"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/station/autocomplete/{query}": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Autocomplete for trainstations",
                "description": "This request returns an array of max. 10 station objects matching the query. **CAUTION:** All\n     *      slashes (as well as encoded to %2F) in {query} need to be replaced, preferrably by a space (%20)",
                "operationId": "trainStationAutocomplete",
                "parameters": [
                    {
                        "name": "query",
                        "in": "path",
                        "description": "station query",
                        "example": "Karls"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ShortTrainStation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/trains/station/history": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "History for trainstations",
                "description": "This request returns an array of max. 10 most recent station objects that the user has arrived\n     *      at.",
                "operationId": "trainStationHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/TrainStation"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/settings/account": {
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Delete User Account",
                "description": "Deletes the Account for the user and all posts created by it",
                "operationId": "deleteUserAccount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "confirmation": {
                                        "title": "confirmation",
                                        "description": "Username of the to be deleted account (needs to match the currently logged in\n     *                  user)",
                                        "example": "Gertrud123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "409": {
                        "description": "Conflict. This should not happen but it tries to prevent a 500."
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized to do this action"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/{username}/statuses": {
            "get": {
                "tags": [
                    "User",
                    "Status"
                ],
                "summary": "[Auth optional] Get paginated statuses for single user",
                "description": "Returns paginated statuses of a single user specified by the username",
                "operationId": "getStatusesForUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Status"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden, User is blocked"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "[Auth optional] Get information for single user",
                "description": "Returns general information, metadata and statistics for a user",
                "operationId": "showUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden, User is blocked"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{id}/block": {
            "post": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Block a user",
                "description": "Block a specific user. That user will not be able to see your statuses or profile information,\n     *      and cannot send you follow requests. Public statuses are still visible through the incognito mode.",
                "operationId": "createBlock",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-blocked user",
                                        "format": "int64",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "User is already blocked"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "delete": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Unmute a user",
                "description": "Unblock a specific user. They are now able to see your statuses and profile information again,\n     *      and send you follow requests.",
                "operationId": "destroyBlock",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-unblocked user",
                                        "format": "int64",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "User is not blocked"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/{id}/mute": {
            "post": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Mute a user",
                "description": "Mute a specific user. That way they will not be shown on your dashboard and in the active\n     *      journeys tab",
                "operationId": "createMute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "409": {
                        "description": "User is already muted"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            },
            "delete": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Unmute a user",
                "description": "Unmute a specific user. That way they will be shown on your dashboard and in the active\n     *      journeys tab again",
                "operationId": "destroyMute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "409": {
                        "description": "User is not muted"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "token": []
                    },
                    {}
                ]
            }
        },
        "/user/search/{query}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get paginated statuses for single user",
                "description": "Returns paginated statuses of a single user specified by the username",
                "operationId": "searchUsers",
                "parameters": [
                    {
                        "name": "query",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BearerTokenResponse": {
                "title": "BearerTokenResponse",
                "properties": {
                    "token": {
                        "title": "token",
                        "description": "Bearer Token. Use in Authentication-Header with prefix 'Bearer '. (space is needed)",
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZWU2ZWZiOWUxYTIwN2FmMjZjNjk4NjVkOTA5ODNmNzFjYzYyMzE5ODA3NGU1NjlhNjU1MGRiMTdhMWY5YmNhMmY4ZjNjNTQ4ZGZkZTY5ZmUiLCJpYXQiOjE2NjYxODUzMDYuOTczODU3LCJuYmYiOjE2NjYxODUzMDYuOTczODYsImV4cCI6MTY5NzcyMTMwNi45NDYyNDgsInN1YiI6IjEiLCJzY29wZXMiOltdfQ.tiv8VeL8qw6BRwo5QZZ71Zn3WnFJjtvVciahiUJjzVNfqgofdRF6EoWrTFc_WmrgbVCdfXBjBI02fjbSrsD4....."
                    },
                    "expires_at": {
                        "title": "slug",
                        "description": "end of life for this token. Lifespan is usually one year.",
                        "type": "string",
                        "example": "2023-10-19T15:15:06+02:00"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BearerTokenResponse"
                }
            },
            "Event": {
                "title": "Event",
                "description": "Event model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 39
                    },
                    "name": {
                        "title": "name",
                        "description": "Name of event",
                        "type": "string",
                        "example": "9-Euro-Ticket"
                    },
                    "slug": {
                        "title": "slug",
                        "description": "URL-Slug for event",
                        "type": "string",
                        "example": "9_euro_ticket"
                    },
                    "hashtag": {
                        "title": "hashtag",
                        "description": "social media hashtag for event",
                        "type": "string",
                        "example": "NeunEuroTicket"
                    },
                    "host": {
                        "title": "host",
                        "description": "host of the event",
                        "example": "Die Bundesregierung"
                    },
                    "url": {
                        "title": "url",
                        "description": "external URL for this event",
                        "type": "string",
                        "example": "https://www.bundesregierung.de/breg-de/aktuelles/faq-9-euro-ticket-2028756"
                    },
                    "begin": {
                        "title": "begin",
                        "description": "Timestamp for the start of the event",
                        "example": "2022-06-01T00:00:00+02:00"
                    },
                    "end": {
                        "title": "end",
                        "description": "Timestamp for the end of the event",
                        "example": "2022-08-31T23:59:00+02:00"
                    },
                    "station": {
                        "title": "station",
                        "description": "nearest station for this event (nullable)",
                        "type": "object",
                        "nullable": "true",
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/TrainStation"
                            },
                            {
                                "type": "'null'"
                            }
                        ]
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Event"
                }
            },
            "EventDetails": {
                "title": "EventDetails",
                "description": "Statistics/Details for Event",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 39
                    },
                    "slug": {
                        "title": "slug",
                        "description": "URL-Slug for event",
                        "type": "string",
                        "example": "9_euro_ticket"
                    },
                    "trainDistance": {
                        "title": "trainDistance",
                        "description": "Total travelled distance for this event in meters",
                        "type": "integer",
                        "format": "int64",
                        "example": 627675656
                    },
                    "trainDuration": {
                        "title": "trainDuration",
                        "description": "Total travelled duration for this event in minutes",
                        "type": "integer",
                        "format": "int64",
                        "example": 591443
                    }
                },
                "type": "object",
                "xml": {
                    "name": "EventDetails"
                }
            },
            "EventSuggestion": {
                "title": "EventSuggestion",
                "description": "Fields for suggesting an event",
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "name of the event",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Eröffnung der Nebenbahn in Knuffingen"
                    },
                    "host": {
                        "title": "host",
                        "description": "host of the event",
                        "type": "string",
                        "example": "MiWuLa",
                        "nullable": true
                    },
                    "url": {
                        "title": "url",
                        "description": "external URL for this event",
                        "type": "string",
                        "maxLength": 255,
                        "example": "https://www.bundesregierung.de/breg-de/aktuelles/faq-9-euro-ticket-2028756",
                        "nullable": true
                    },
                    "begin": {
                        "title": "begin",
                        "description": "Timestamp for the start of the event",
                        "example": "2022-06-01T00:00:00+02:00"
                    },
                    "end": {
                        "title": "end",
                        "description": "Timestamp for the end of the event",
                        "example": "2022-08-31T23:59:00+02:00"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "EventSuggestion"
                }
            },
            "Links": {
                "title": "Links",
                "description": "pagination links",
                "properties": {
                    "first": {
                        "title": "first",
                        "description": "URL to first page of this pagination",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=1",
                        "nullable": true
                    },
                    "last": {
                        "title": "last",
                        "description": "URL to last page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": null,
                        "nullable": true
                    },
                    "prev": {
                        "title": "prev",
                        "description": "URL to previous page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=1",
                        "nullable": true
                    },
                    "next": {
                        "title": "next",
                        "description": "URL to next page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=2",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Links"
                }
            },
            "PaginationMeta": {
                "title": "Meta",
                "description": "Pagination meta data",
                "properties": {
                    "current_page": {
                        "title": "current_page",
                        "description": "currently displayed page in this pagination",
                        "type": "integer",
                        "example": 2
                    },
                    "from": {
                        "title": "from",
                        "description": "The first element on this page is the nth element of the query",
                        "type": "integer",
                        "example": 16
                    },
                    "path": {
                        "title": "path",
                        "description": "The path of this pagination",
                        "type": "string",
                        "format": "url",
                        "example": "https://traewelling.de/api/v1/ENDPOINT"
                    },
                    "per_page": {
                        "title": "per_page",
                        "description": "the amount of items per page in this pagination",
                        "type": "integer",
                        "example": 15
                    },
                    "to": {
                        "title": "to",
                        "description": "The last element on this page is the nth element of the query",
                        "type": "integer",
                        "example": 30
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PaginationMeta"
                }
            },
            "LeaderboardUser": {
                "title": "LeaderboardUser",
                "properties": {
                    "username": {
                        "title": "username",
                        "description": "username of user",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "title": "profilePicture",
                        "description": "URL of the profile picture of the user",
                        "type": "integer",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "trainDuration": {
                        "title": "trainDuration",
                        "description": "duration travelled by train in minutes",
                        "type": "integer",
                        "format": "int64",
                        "example": 6
                    },
                    "trainDistance": {
                        "title": "trainDistance",
                        "description": "distance travelled by train in meters",
                        "type": "integer",
                        "format": "int64",
                        "example": 12345
                    },
                    "trainSpeed": {
                        "title": "trainSpeed",
                        "description": "average speed travelled by train in meters",
                        "type": "number",
                        "format": "float",
                        "example": 123.45
                    },
                    "points": {
                        "title": "points",
                        "description": "Current points of the last 7 days",
                        "type": "integer",
                        "format": "int64",
                        "example": 300
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LeaderboardUser"
                }
            },
            "PaginationPage": {
                "title": "PaginationPage",
                "description": "pagination links",
                "xml": {
                    "name": "PaginationPage"
                }
            },
            "Points": {
                "title": "Points",
                "description": "Points model",
                "properties": {
                    "points": {
                        "title": "points",
                        "description": "points",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "calculation": {
                        "$ref": "#/components/schemas/PointsCalculation"
                    },
                    "additional": {
                        "title": "additional",
                        "description": "extra points that can be given",
                        "type": "array",
                        "items": {
                            "example": {
                                "identifier": "extrapoints",
                                "points": 4,
                                "divisibile": false
                            }
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Points"
                }
            },
            "PointsCalculation": {
                "title": "PointsCalculation",
                "properties": {
                    "base": {
                        "title": "base",
                        "description": "Basepoints for this type of vehicle",
                        "type": "number",
                        "format": "float",
                        "example": 0.5
                    },
                    "distance": {
                        "title": "distance",
                        "description": "Points for the travelled distance",
                        "example": 0.25
                    },
                    "factor": {
                        "title": "factor",
                        "example": 0.25
                    },
                    "reason": {
                        "$ref": "#/components/schemas/PointsReasonEnum"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PointsCalculation"
                }
            },
            "Polyline": {
                "title": "Polyline",
                "description": "Polyline of a single status as GeoJSON Feature",
                "properties": {
                    "type": {
                        "title": "type",
                        "type": "string",
                        "example": "Feature"
                    },
                    "geometry": {
                        "properties": {
                            "type": {
                                "type": "object",
                                "example": "LineString"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "example": "[[8.39767,49.01625],[8.45947,49.06576],[8.52401,49.01625],[8.39218,48.88729],[8.25759,49.00544],[8.30703,49.07476],[8.39080,49.01535]]"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "properties": {
                        "properties": {
                            "statusId": {
                                "type": "integer",
                                "example": 1337
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Polyline"
                }
            },
            "ShortTrainStation": {
                "title": "ShortTrainStation",
                "description": "shortened train station model",
                "properties": {
                    "ibnr": {
                        "title": "ibnr",
                        "description": "IBNR of the station",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "rilIdentifier": {
                        "title": "rilIdentifier",
                        "description": "Identifier specified in 'Richtline 100' of the Deutsche Bahn",
                        "type": "string",
                        "example": "RK",
                        "nullable": "true"
                    },
                    "name": {
                        "title": "name",
                        "description": "name of the station",
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "ShortTrainStation"
                }
            },
            "Status": {
                "title": "Status",
                "description": "Status model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 12345
                    },
                    "body": {
                        "title": "body",
                        "description": "User defined status text",
                        "example": "Hello world!"
                    },
                    "type": {
                        "title": "type",
                        "description": "type of status",
                        "type": "string",
                        "example": "HAFAS"
                    },
                    "user": {
                        "title": "user",
                        "description": "user id",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "username": {
                        "title": "username",
                        "description": "username (@-name)",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "preventIndex": {
                        "title": "preventIndex",
                        "description": "Did the user choose to prevent search engines from indexing their profile?",
                        "type": "boolean",
                        "example": false
                    },
                    "business": {
                        "$ref": "#/components/schemas/BusinessEnum"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/VisibilityEnum"
                    },
                    "likes": {
                        "title": "likes",
                        "description": "How many people have liked this status",
                        "type": "integer",
                        "format": "int64",
                        "example": 12
                    },
                    "liked": {
                        "title": "liked",
                        "description": "Did the currently authenticated user like this status? (if unauthenticated = false)",
                        "type": "boolean",
                        "example": true
                    },
                    "createdAt": {
                        "title": "createdAt",
                        "description": "creation date of this status",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-07-17T13:37:00+02:00"
                    },
                    "train": {
                        "$ref": "#/components/schemas/Train"
                    },
                    "event": {
                        "$ref": "#/components/schemas/Event"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Status"
                }
            },
            "Stopovers": {
                "title": "Stopovers",
                "description": "Stopovers of a single status",
                "properties": {
                    "1": {
                        "description": "Array of stopovers. Key describes trip id",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TrainStopover"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Stopovers"
                }
            },
            "SuccessResponse": {
                "title": "SuccessResponse",
                "description": "Success Response",
                "properties": {
                    "status": {
                        "title": "status",
                        "description": "status",
                        "type": "string",
                        "example": "success"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "SuccessResponse"
                }
            },
            "Train": {
                "title": "Train",
                "description": "Train model",
                "properties": {
                    "trip": {
                        "title": "trip",
                        "description": "ID",
                        "type": "integer",
                        "example": 1
                    },
                    "hafasId": {
                        "title": "hafasId",
                        "description": "Deutsche bahn internal HAFAS ID",
                        "type": "string",
                        "example": "1|323306|1|80|17072022"
                    },
                    "category": {
                        "$ref": "#/components/schemas/TrainCategoryEnum"
                    },
                    "number": {
                        "title": "number",
                        "description": "number of train",
                        "type": "string",
                        "example": "4-a6s4-4"
                    },
                    "lineName": {
                        "title": "lineName",
                        "description": "name of the transport line",
                        "type": "string",
                        "example": "S 4"
                    },
                    "distance": {
                        "title": "distance",
                        "description": "travelled distance of this checkin in meters",
                        "type": "integer",
                        "example": 3349
                    },
                    "points": {
                        "title": "points",
                        "description": "points achieved for this checkin",
                        "type": "integer",
                        "example": 7
                    },
                    "duration": {
                        "title": "duration",
                        "description": "time traveled in this checkin in minutes",
                        "type": "integer",
                        "example": 7
                    },
                    "speed": {
                        "title": "speed",
                        "description": "speed of this checkin in kph",
                        "type": "number",
                        "format": "float",
                        "example": 85.98857142857143
                    },
                    "origin": {
                        "$ref": "#/components/schemas/TrainStopover"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/TrainStopover"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Train"
                }
            },
            "TrainCheckinRequestBody": {
                "title": "TrainCheckinRequestBody",
                "description": "Fields for creating a train checkin",
                "properties": {
                    "body": {
                        "title": "body",
                        "description": "Text that should be added to the post",
                        "type": "string",
                        "maxLength": 280,
                        "example": "Meine erste Fahrt nach Knuffingen!",
                        "nullable": true
                    },
                    "business": {
                        "$ref": "#/components/schemas/BusinessEnum"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/VisibilityEnum"
                    },
                    "eventId": {
                        "title": "eventId",
                        "description": "Id of an event the status should be connected to",
                        "type": "integer",
                        "nullable": true
                    },
                    "tweet": {
                        "title": "tweet",
                        "description": "Should this status be posted to twitter?",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    },
                    "toot": {
                        "title": "toot",
                        "description": "Should this status be posted to mastodon?",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    },
                    "chainPost": {
                        "title": "chainPost",
                        "description": "Should this status be posted to mastodon as a chained post?",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    },
                    "ibnr": {
                        "title": "ibnr",
                        "description": "If true, the `start` and `destination` properties can be supplied as an ibnr. Otherwise they\n     *     should be given as the Träwelling-ID. Default behavior is `false`.",
                        "type": "boolean",
                        "example": "true",
                        "nullable": true
                    },
                    "tripId": {
                        "title": "tripId",
                        "description": "The HAFAS tripId for the to be checked in train",
                        "example": "1|323306|1|80|17072022"
                    },
                    "lineName": {
                        "title": "lineName",
                        "description": "The line name for the to be checked in train",
                        "example": "S 4"
                    },
                    "start": {
                        "title": "start",
                        "description": "The TrainStation-ID of the starting point (see `ibnr`)",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "destination": {
                        "title": "destination",
                        "description": "The TrainStation-ID of the destination (see `ibnr`)",
                        "type": "integer",
                        "example": "8079045"
                    },
                    "departure": {
                        "title": "departure",
                        "description": "Timestamp of the departure",
                        "example": "2022-12-19T20:41:00+01:00"
                    },
                    "arrival": {
                        "title": "arrival",
                        "description": "Timestamp of the arrival",
                        "example": "2022-12-19T20:42:00+01:00"
                    },
                    "force": {
                        "title": "force",
                        "description": "If true, the checkin will be created, even if a colliding checkin exists. No points will be\n     *     awarded.",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TrainCheckinRequestBody"
                }
            },
            "TrainCheckinResponse": {
                "title": "TrainCheckinResponse",
                "properties": {
                    "status": {
                        "title": "status",
                        "description": "StatusModel of the created status",
                        "type": "string",
                        "example": ""
                    },
                    "points": {
                        "$ref": "#/components/schemas/Points"
                    },
                    "alsoOnThisConnection": {
                        "title": "alsoOnThisconnection",
                        "description": "Statuses of other people on this connection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Status"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TrainCheckinResponse"
                }
            },
            "TrainStation": {
                "title": "TrainStation",
                "description": "train station model",
                "properties": {
                    "id": {
                        "title": "id",
                        "description": "id",
                        "type": "integer",
                        "example": "4711"
                    },
                    "name": {
                        "title": "name",
                        "description": "name of the station",
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    },
                    "latitude": {
                        "title": "latitude",
                        "description": "latitude of the station",
                        "type": "number",
                        "format": "float",
                        "example": "48.991591"
                    },
                    "longitude": {
                        "title": "longitude",
                        "description": "longitude of the station",
                        "type": "number",
                        "format": "float",
                        "example": "8.400538"
                    },
                    "ibnr": {
                        "title": "ibnr",
                        "description": "IBNR of the station",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "rilIdentifier": {
                        "title": "rilIdentifier",
                        "description": "Identifier specified in 'Richtline 100' of the Deutsche Bahn",
                        "type": "string",
                        "example": "RK",
                        "nullable": "true"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TrainStation"
                }
            },
            "TrainStopover": {
                "title": "TrainStopover",
                "description": "train station model",
                "properties": {
                    "id": {
                        "title": "id",
                        "description": "id",
                        "type": "integer",
                        "example": "12089"
                    },
                    "name": {
                        "title": "name",
                        "description": "name of the station",
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    },
                    "rilIdentifier": {
                        "title": "rilIdentifier",
                        "description": "Identifier specified in 'Richtline 100' of the Deutsche Bahn",
                        "type": "string",
                        "example": "RK",
                        "nullable": "true"
                    },
                    "evaIdentifier": {
                        "title": "evaIdentifier",
                        "description": "IBNR identifier of Deutsche Bahn",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "arrival": {
                        "title": "arrival",
                        "description": "currently known arrival time. Equal to arrivalReal if known. Else equal to arrivalPlanned.",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "arrivalPlanned": {
                        "title": "arrivalPlanned",
                        "description": "planned arrival according to timetable records",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "arrivalReal": {
                        "title": "arrivalReal",
                        "description": "real arrival according to live data",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "arrivalPlatformPlanned": {
                        "title": "arrivalPlatformPlanned",
                        "description": "planned arrival platform according to timetable records",
                        "type": "string",
                        "example": "3",
                        "nullable": true
                    },
                    "arrivalPlatformReal": {
                        "title": "arrivalPlatformReal",
                        "description": "real arrival platform according to live data",
                        "type": "string",
                        "example": "3",
                        "nullable": true
                    },
                    "departure": {
                        "title": "departure",
                        "description": "currently known departure time. Equal to departureReal if known. Else equal to\n     *     departurePlanned.",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "departurePlanned": {
                        "title": "departurePlanned",
                        "description": "planned departure according to timetable records",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "departureReal": {
                        "title": "departureReal",
                        "description": "real departure according to live data",
                        "example": "2022-07-17T14:17:00+02:00",
                        "nullable": true
                    },
                    "departurePlatformPlanned": {
                        "title": "departurePlatformPlanned",
                        "description": "planned departure platform according to timetable records",
                        "type": "string",
                        "example": "3",
                        "nullable": true
                    },
                    "departurePlatformReal": {
                        "title": "departurePlatformReal",
                        "description": "real departure platform according to live data",
                        "type": "string",
                        "example": "3",
                        "nullable": true
                    },
                    "platform": {
                        "title": "platform",
                        "description": "platform",
                        "type": "string",
                        "example": "3",
                        "nullable": "true"
                    },
                    "isArrivalDelayed": {
                        "title": "isArrivalDelayed",
                        "description": "Is there a delay in the arrival time?",
                        "type": "boolean",
                        "example": false
                    },
                    "isDeparutreDelayed": {
                        "title": "isDepartureDelayed",
                        "description": "Is there a delay in the departure time?",
                        "type": "boolean",
                        "example": false
                    },
                    "cancelled": {
                        "title": "cancelled",
                        "description": "is this stopover cancelled?",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object",
                "xml": {
                    "name": "TrainStopover"
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "displayName": {
                        "title": "displayName",
                        "description": "Display name of the user",
                        "example": "Gertrud"
                    },
                    "username": {
                        "title": "username",
                        "description": "username of user",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "title": "profilePicture",
                        "description": "URL of the profile picture of the user",
                        "type": "integer",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "trainDistance": {
                        "title": "trainDistance",
                        "description": "distance travelled by train in meters",
                        "type": "integer",
                        "format": "int64",
                        "example": 12345
                    },
                    "trainDuration": {
                        "title": "trainDuration",
                        "description": "duration travelled by train in minutes",
                        "type": "integer",
                        "format": "int64",
                        "example": 6
                    },
                    "trainSpeed": {
                        "title": "trainSpeed",
                        "description": "average speed travelled by train in meters",
                        "type": "number",
                        "format": "float",
                        "example": 123.45
                    },
                    "points": {
                        "title": "points",
                        "description": "Current points of the last 7 days",
                        "type": "integer",
                        "format": "int64",
                        "example": 300
                    },
                    "twitterUrl": {
                        "title": "twitterUrl",
                        "description": "URL to the Twitter profile of the user",
                        "type": "string",
                        "example": "https://twitter.com/i/user/843458335",
                        "nullable": true
                    },
                    "mastodonUrl": {
                        "title": "mastodonUrl",
                        "description": "URL to the Mastodon profile of the user",
                        "type": "string",
                        "example": "https://chaos.social/@traewelling",
                        "nullable": true
                    },
                    "privateProfile": {
                        "title": "privateProfile",
                        "description": "is this profile set to private?",
                        "type": "boolean",
                        "example": false
                    },
                    "userInvisibleToMe": {
                        "title": "userInvisibleToMe",
                        "description": "Can the currently authenticated user see the statuses of this user?",
                        "type": "boolean",
                        "example": false
                    },
                    "muted": {
                        "title": "muted",
                        "description": "Is this user muted by the currently authenticated user?",
                        "type": "boolean",
                        "example": false
                    },
                    "following": {
                        "title": "following",
                        "description": "Does the currently authenticated user follow this user?",
                        "type": "boolean",
                        "example": false
                    },
                    "followPending": {
                        "title": "followPending",
                        "description": "Is there a currently pending follow request?",
                        "type": "boolean",
                        "example": false
                    },
                    "preventIndex": {
                        "title": "preventIndex",
                        "description": "Did the user choose to prevent search engines from indexing their profile?",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            },
            "UserAuth": {
                "title": "UserAuth",
                "description": "User auth model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    },
                    "displayName": {
                        "title": "displayName",
                        "description": "Display name of the user",
                        "example": "Gertrud"
                    },
                    "username": {
                        "title": "username",
                        "description": "username of user",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "title": "profilePicture",
                        "description": "URL of the profile picture of the user",
                        "type": "integer",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "trainDistance": {
                        "title": "trainDistance",
                        "description": "distance travelled by train in meters",
                        "type": "integer",
                        "format": "int64",
                        "example": 12345
                    },
                    "trainDuration": {
                        "title": "trainDuration",
                        "description": "duration travelled by train in minutes",
                        "type": "integer",
                        "format": "int64",
                        "example": 6
                    },
                    "trainSpeed": {
                        "title": "trainSpeed",
                        "description": "average speed travelled by train in meters",
                        "type": "number",
                        "format": "float",
                        "example": 123.45
                    },
                    "points": {
                        "title": "points",
                        "description": "Current points of the last 7 days",
                        "type": "integer",
                        "format": "int64",
                        "example": 300
                    },
                    "twitterUrl": {
                        "title": "twitterUrl",
                        "description": "URL to the Twitter profile of the user",
                        "type": "string",
                        "example": "https://twitter.com/i/user/843458335",
                        "nullable": true
                    },
                    "mastodonUrl": {
                        "title": "mastodonUrl",
                        "description": "URL to the Mastodon profile of the user",
                        "type": "string",
                        "example": "https://chaos.social/@traewelling",
                        "nullable": true
                    },
                    "privateProfile": {
                        "title": "privateProfile",
                        "description": "is this profile set to private?",
                        "type": "boolean",
                        "example": false
                    },
                    "privacyHideDays": {
                        "title": "privacyHideDays",
                        "description": "Hide all statuses after x days",
                        "type": "integer",
                        "example": 3,
                        "nullable": true
                    },
                    "preventIndex": {
                        "title": "preventIndex",
                        "description": "Did the user choose to prevent search engines from indexing their profile?",
                        "type": "boolean",
                        "example": false
                    },
                    "role": {
                        "title": "role",
                        "description": "The permission-role of a user. Distinguishes access level to certain features.",
                        "type": "integer",
                        "example": 0
                    },
                    "home": {
                        "$ref": "#/components/schemas/TrainStation"
                    },
                    "language": {
                        "title": "language",
                        "description": "what is the specified language of this user",
                        "example": "en",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserAuth"
                }
            },
            "StatusUpdateBody": {
                "title": "StatusUpdateBody",
                "description": "Status Update Body",
                "properties": {
                    "body": {
                        "title": "body",
                        "description": "Status-Text to be displayed alongside the checkin",
                        "maxLength": 280,
                        "example": "Wow. This train is extremely crowded!",
                        "nullable": true
                    },
                    "business": {
                        "$ref": "#/components/schemas/BusinessEnum"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/VisibilityEnum"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StatusUpdateBody"
                }
            },
            "BusinessEnum": {
                "title": "Business",
                "description": "What type of travel (0=private, 1=business, 2=commute) did the user specify?",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2
                ],
                "example": 0
            },
            "PointsReasonEnum": {
                "title": "PointsReason",
                "description": "What is the reason for the points calculation factor? (0=in time => 100%, 1=good enough => 25%, 2=not sufficient (1 point), 3=forced => no points)",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "example": 1
            },
            "TrainCategoryEnum": {
                "title": "category",
                "description": "Category of transport. ",
                "type": "string",
                "enum": [
                    "nationalExpress",
                    "national",
                    "regionalExp",
                    "regional",
                    "suburban",
                    "bus",
                    "ferry",
                    "subway",
                    "tram",
                    "taxi"
                ],
                "example": "suburban"
            },
            "TravelTypeEnum": {
                "title": "travelType",
                "type": "string",
                "enum": [
                    "express",
                    "regional",
                    "suburban",
                    "bus",
                    "ferry",
                    "subway",
                    "tram",
                    "taxi",
                    "tram",
                    "taxi"
                ],
                "example": "suburban"
            },
            "VisibilityEnum": {
                "title": "visibility",
                "description": "What type of visibility (0=public, 1=unlisted, 2=followers, 3=private, 4=authenticated) did the\n *     user specify?",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "example": 0
            }
        },
        "parameters": {
            "page": {
                "name": "page",
                "in": "query",
                "description": "Page of pagination",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            }
        },
        "securitySchemes": {
            "token": {
                "type": "apiKey",
                "description": "Enter token in format \"Bearer \\<token\\>\"",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Logging in, creating Accounts, etc."
        },
        {
            "name": "Checkin",
            "description": "Checkin related endpoints. Regular process is departures -> trip -> checkin"
        },
        {
            "name": "Events",
            "description": "Events that users can check in to"
        },
        {
            "name": "Status",
            "description": "Endpoints for accessing and manipulating Statusses and their additional data"
        },
        {
            "name": "Dashboard",
            "description": "API Endpoints of Dashboard"
        },
        {
            "name": "Likes",
            "description": "Likes regarding a single status"
        },
        {
            "name": "User",
            "description": "Information regarding users"
        },
        {
            "name": "User/Follow",
            "description": "Follow and unfollow users, manage your followers"
        },
        {
            "name": "User/Hide and Block",
            "description": "Mute and block users"
        },
        {
            "name": "Leaderboard",
            "description": "Leaderboard related endpoints"
        },
        {
            "name": "Statistics",
            "description": "Statistics related endpoints"
        },
        {
            "name": "Settings",
            "description": "User/Profile-Settings"
        }
    ]
}