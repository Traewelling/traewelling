{
    "openapi": "3.0.0",
    "info": {
        "title": "Träwelling API",
        "description": "Träwelling user API description. This is an incomplete documentation with still many errors. The API is currently not yet stable. Endpoints are still being restructured. Both the URL and the request or body can be changed. Breaking changes will be announced on GitHub: https://github.com/Traewelling/traewelling/blob/develop/API_CHANGELOG.md",
        "contact": {
            "email": "support@traewelling.de"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0 - alpha"
    },
    "servers": [
        {
            "url": "https://traewelling.de/api/v1",
            "description": "Production Server"
        },
        {
            "url": "http://localhost:8000/api/v1",
            "description": "This instance"
        }
    ],
    "paths": {
        "/auth/logout": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Logout & invalidate current bearer token",
                "operationId": "logoutUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "status": {
                                            "example": "success"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Error during revoke"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/auth/user": {
            "get": {
                "tags": [
                    "Auth",
                    "User"
                ],
                "summary": "Get authenticated user information",
                "description": "Get all profile information about the authenticated user",
                "operationId": "getAuthenticatedUser",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserAuthResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/auth/refresh": {
            "post": {
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Bearer Token",
                "description": "This request issues a new Bearer-Token with a new expiration date while also revoking the old\n     *      token.",
                "operationId": "refreshToken",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/BearerTokenResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/event/{slug}": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get basic information for event",
                "description": "Returns slug, name and duration for an event",
                "operationId": "getEvent",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/EventResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/event/{slug}/details": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get additional information for event",
                "description": "Returns overall travelled distance and duration for an event",
                "operationId": "getEventDetails",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/EventDetailsResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/event/{slug}/statuses": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Get paginated statuses for event",
                "description": "Returns all for user visible statuses for an event",
                "operationId": "getEventStatuses",
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "description": "slug for event",
                        "schema": {
                            "type": "string"
                        },
                        "example": "weihnachten_2022"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/events": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "[Auth optional] Show active or upcoming events for the given timestamp",
                "description": "Returns all active or upcoming events for the given timestamp. Default timestamp is now. If upcoming is set to true, all events ending after the timestamp are returned.",
                "operationId": "getEvents",
                "parameters": [
                    {
                        "name": "timestamp",
                        "in": "query",
                        "description": "The timestamp of view. Default is now.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2022-08-01T12:00:00+02:00"
                    },
                    {
                        "name": "upcoming",
                        "in": "query",
                        "description": "Show only upcoming events",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/EventResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/event": {
            "post": {
                "tags": [
                    "Events"
                ],
                "summary": "Suggest a event",
                "description": "Submit a possible event for our administrators to publish",
                "operationId": "suggestEvent",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventSuggestion"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/activeEvents": {
            "get": {
                "tags": [
                    "Events"
                ],
                "summary": "DEPRECATED - USE /events - removed after 2024-08",
                "description": "DEPRECATED - USE /events - removed after 2024-08",
                "operationId": "getActiveEvents",
                "responses": {
                    "200": {
                        "description": "The events"
                    }
                }
            }
        },
        "/user/{id}/follow": {
            "post": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Follow a user",
                "operationId": "createFollow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Already following"
                    },
                    "403": {
                        "description": "User is blocked"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-follows"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Unfollow a user",
                "operationId": "destroyFollow",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "Already following"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-follows"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/settings/followers": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all followers",
                "operationId": "getFollowers",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Already following"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-settings-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/settings/follow-requests": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all followers",
                "operationId": "getFollowRequests",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-settings-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/settings/followings": {
            "get": {
                "tags": [
                    "User/Follow",
                    "Settings"
                ],
                "summary": "List all users the current user is following",
                "operationId": "getFollowings",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-settings-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/removeFollower": {
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Remove a follower",
                "operationId": "removeFollower",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-unfollowed user",
                                        "format": "int",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Follow not found"
                    },
                    "500": {
                        "description": "Unknown error"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/acceptFollowRequest": {
            "put": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Accept a follow request",
                "operationId": "acceptFollowRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the user who sent the follow request",
                                        "format": "int",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "Request not found"
                    },
                    "500": {
                        "description": "Unknown error"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/rejectFollowRequest": {
            "delete": {
                "tags": [
                    "User/Follow"
                ],
                "summary": "Reject a follow request",
                "operationId": "rejectFollowRequest",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the user who sent the follow request",
                                        "format": "int",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Permission denied"
                    },
                    "404": {
                        "description": "Request not found"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-followers"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/status/{id}/likes": {
            "get": {
                "tags": [
                    "Likes"
                ],
                "summary": "[Auth optional] Get likes for status",
                "description": "Returns array of users that liked the status. Can return an empty dataset when the status\n     *      author or the requesting user has deactivated likes",
                "operationId": "getLikesForStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/status/{id}/like": {
            "post": {
                "tags": [
                    "Likes"
                ],
                "summary": "Add like to status",
                "description": "Add like to status",
                "operationId": "addLikeToStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/LikeResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "409": {
                        "description": "Status already liked by user"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-likes"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Likes"
                ],
                "summary": "Remove like from status",
                "description": "Removes like from status",
                "operationId": "removeLikeFromStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/LikeResponse"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-likes"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/unread/count": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get count of unread notifications for authenticated user",
                "description": "Returns count of unread notifications of a authenticated user",
                "operationId": "getUnreadCount",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "integer",
                                            "example": 2
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-notifications"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications": {
            "get": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Get paginated notifications for authenticated user",
                "description": "Returns paginated notifications of a authenticated",
                "operationId": "listNotifications",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Notification"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-notifications"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/read/{id}": {
            "put": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark notification as read",
                "operationId": "markAsRead",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of notification",
                        "schema": {
                            "type": "string"
                        },
                        "example": "cbf6054e-9c00-4b1f-ab37-7eb18ac8419f"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Notification"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Notification not found"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-notifications"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/unread/{id}": {
            "put": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark notification as unread",
                "operationId": "markAsUnread",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of notification",
                        "schema": {
                            "type": "string"
                        },
                        "example": "cbf6054e-9c00-4b1f-ab37-7eb18ac8419f"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Notification"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Notification not found"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-notifications"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/notifications/read/all": {
            "put": {
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark all notification as read",
                "operationId": "markAllAsRead",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-notifications"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/operators": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Get a list of all operators.",
                "operationId": "bcfcf8686980cf0fcdc751b2e13fa4f7",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/OperatorResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated"
                    },
                    "403": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/static/privacy": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get the current privacy policy",
                "description": "Get the current privacy policy",
                "operationId": "e649bec35ba50765db023e745233eda9",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "validFrom": {
                                                    "example": "2022-01-05T16:26:14.000000Z"
                                                },
                                                "en": {
                                                    "example": "This is the english privacy policy"
                                                },
                                                "de": {
                                                    "example": "Dies ist die deutsche Datenschutzerklärung"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/settings/acceptPrivacy": {
            "post": {
                "tags": [
                    "Settings"
                ],
                "summary": "Accept the current privacy policy",
                "description": "Accept the current privacy policy",
                "operationId": "acceptPrivacyPolicy",
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Already accepted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/report": {
            "post": {
                "tags": [
                    "User",
                    "Status",
                    "Events"
                ],
                "summary": "Report a Status, Event or User to the admins.",
                "operationId": "report",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "subject_type",
                                    "subject_id",
                                    "reason"
                                ],
                                "properties": {
                                    "subject_type": {
                                        "type": "string",
                                        "enum": [
                                            "Event",
                                            "Status",
                                            "User"
                                        ],
                                        "example": "Status"
                                    },
                                    "subject_id": {
                                        "type": "integer",
                                        "example": 1
                                    },
                                    "reason": {
                                        "type": "string",
                                        "enum": [
                                            "inappropriate",
                                            "implausible",
                                            "spam",
                                            "illegal",
                                            "other"
                                        ],
                                        "example": "inappropriate"
                                    },
                                    "description": {
                                        "type": "string",
                                        "example": "The status is inappropriate because...",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The report was successfully created."
                    },
                    "401": {
                        "description": "The user is not authenticated."
                    },
                    "422": {
                        "description": "The given data was invalid."
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/settings/profile": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get the current user's profile settings",
                "description": "Get the current user's profile settings",
                "operationId": "getProfileSettings",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserProfileSettings"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-settings"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update the current user's profile settings",
                "description": "Update the current user's profile settings",
                "operationId": "updateProfileSettings",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "maxLength": 25,
                                        "example": "gertrud123"
                                    },
                                    "displayName": {
                                        "type": "string",
                                        "maxLength": 50,
                                        "example": "Gertrud"
                                    },
                                    "privateProfile": {
                                        "type": "boolean",
                                        "example": false,
                                        "nullable": true
                                    },
                                    "preventIndex": {
                                        "type": "boolean",
                                        "example": false,
                                        "nullable": true
                                    },
                                    "privacyHideDays": {
                                        "type": "integer",
                                        "example": 1,
                                        "nullable": true
                                    },
                                    "defaultStatusVisibility": {
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "mastodonVisibility": {
                                        "type": "integer",
                                        "nullable": true
                                    },
                                    "mapProvider": {
                                        "type": "string",
                                        "nullable": true
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/UserProfileSettings"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-settings"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/leaderboard": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get array of 20 best users",
                "operationId": "getLeaderboard",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUserResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/leaderboard/distance": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get leaderboard array sorted by distance",
                "operationId": "getLeaderboardByDistance",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUserResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/leaderboard/friends": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "Get friends-leaderboard array sorted",
                "operationId": "getLeaderboardByFriends",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUserResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/leaderboard/{month}": {
            "get": {
                "tags": [
                    "Leaderboard"
                ],
                "summary": "[Auth optional] Get leaderboard array for a specific month",
                "operationId": "getMonthlyLeaderboard",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month for the complete leaderboard in Format `YYYY-MM`",
                        "schema": {
                            "type": "string"
                        },
                        "example": "2022-04"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LeaderboardUserResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No Event found for this id"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statistics": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get personal statistics",
                "operationId": "getStatistics",
                "parameters": [
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start date for the statistics",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    {
                        "name": "until",
                        "in": "query",
                        "description": "End date for the statistics",
                        "example": "2021-02-01T00:00:00.000Z"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "purpose": {
                                                    "description": "The purpose of travel",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "$ref": "#/components/schemas/Business"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 11
                                                            },
                                                            "duration": {
                                                                "description": "Duration in\n     *                                                            minutes",
                                                                "type": "integer",
                                                                "example": 425
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "categories": {
                                                    "description": "The categories of the travel",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "$ref": "#/components/schemas/HafasTravelType"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 11
                                                            },
                                                            "duration": {
                                                                "description": "Duration in minutes",
                                                                "type": "integer",
                                                                "example": 425
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "operators": {
                                                    "description": "The operators of the means of transport",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "name": {
                                                                "example": "Gertruds Verkehrsgesellschaft mbH"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "duration": {
                                                                "description": "Duration in minutes",
                                                                "type": "integer",
                                                                "example": 424
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                },
                                                "time": {
                                                    "description": "Shows the daily travel volume",
                                                    "type": "array",
                                                    "items": {
                                                        "properties": {
                                                            "date": {
                                                                "type": "string",
                                                                "example": "2021-01-01T00:00:00.000Z"
                                                            },
                                                            "count": {
                                                                "type": "integer",
                                                                "example": 10
                                                            },
                                                            "duration": {
                                                                "description": "Duration in minutes",
                                                                "type": "integer",
                                                                "example": 424
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statistics/daily/{date}": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get statistics and statuses of one day",
                "description": "Returns all statuses and statistics for the requested day",
                "operationId": "getDailyStatistics",
                "parameters": [
                    {
                        "name": "date",
                        "in": "path",
                        "description": "Date for the statistics in Format `YYYY-MM-DD`",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "example": "2024-04-09"
                    },
                    {
                        "name": "timezone",
                        "in": "query",
                        "description": "Timezone for the date. If not set, the user's timezone will be used.",
                        "schema": {
                            "type": "string"
                        },
                        "example": "Europe/Berlin"
                    },
                    {
                        "name": "withPolylines",
                        "in": "query",
                        "description": "If this parameter is set, the polylines will be returned as well. Otherwise attribute is\n     *          null.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "statuses": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/StatusResource"
                                                    }
                                                },
                                                "polylines": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/FeatureCollection"
                                                    }
                                                },
                                                "totalDistance": {
                                                    "type": "integer",
                                                    "example": "74026"
                                                },
                                                "totalDuration": {
                                                    "type": "integer",
                                                    "example": "4711"
                                                },
                                                "totalPoints": {
                                                    "type": "integer",
                                                    "example": "42"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User not authorized to access this"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statistics/global": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Get global statistics of the last 4 weeks",
                "operationId": "getGlobalStatistics",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "distance": {
                                                    "description": "Globally travelled distance in meters",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "duration": {
                                                    "description": "Globally travelled duration in minutes",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "activeUsers": {
                                                    "description": "Number of active users",
                                                    "type": "integer",
                                                    "example": 1000
                                                },
                                                "meta": {
                                                    "properties": {
                                                        "from": {
                                                            "example": "2021-01-01T00:00:00.000000Z"
                                                        },
                                                        "until": {
                                                            "example": "2021-02-01T00:00:00.000000Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statistics"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/dashboard": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated statuses of personal dashboard",
                "description": "Returns paginated statuses of personal dashboard",
                "operationId": "getDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/dashboard/global": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated statuses of global dashboard",
                "description": "Returns paginated statuses of global dashboard",
                "operationId": "getGlobalDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/dashboard/future": {
            "get": {
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get paginated future statuses of current user",
                "description": "Returns paginated statuses of the authenticated user, that are more than 20 minutes in the\n     *      future",
                "operationId": "getFutureDashboard",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statuses": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get active statuses",
                "description": "Returns all currently active statuses that are visible to the (un)authenticated user",
                "operationId": "getActiveStatuses",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/positions": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] get live positions for active statuses",
                "description": "Returns an array of live position objects for active statuses",
                "operationId": "getLivePositionsForActiveStatuses",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LivePointDto"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/positions/{ids}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] get live positions for given statuses",
                "description": "Returns an array of live position objects for given status IDs",
                "operationId": "getLivePositionsForStatuses",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "Status-IDs separated by comma",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1337,1338"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/LivePointDto"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/status/{id}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get single statuses",
                "description": "Returns a single status Object, if user is authorized to see it",
                "operationId": "getSingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/StatusResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Status"
                ],
                "summary": "Update a status",
                "description": "Updates a single status Object, if user is authorized to",
                "operationId": "updateSingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StatusUpdateBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/StatusResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Status"
                ],
                "summary": "Destroy a status",
                "description": "Deletes a single status Object, if user is authorized to",
                "operationId": "destroySingleStatus",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/polyline/{ids}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get GeoJSON for statuses",
                "description": "Returns GeoJSON for all requested status IDs",
                "operationId": "getPolylines",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "comma seperated status IDs",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1337,1338"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "type": {
                                                    "example": "FeatureCollection"
                                                },
                                                "features": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Polyline"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/stopovers/{ids}": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "[Auth optional] Get stopovers for statuses",
                "description": "Returns all underway-stops for stations",
                "operationId": "getStopOvers",
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "comma seperated trip IDs",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1,2"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "1": {
                                                    "description": "Array of stopovers. Key describes trip id",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/StopoverResource"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/statuses/active": {
            "get": {
                "tags": [
                    "Auth"
                ],
                "summary": "User state",
                "description": "This request returns whether the currently logged-in user has an active check-in or not.",
                "operationId": "userState",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/StatusResource"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No active checkin"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/status/{statusId}/tags": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Show all tags for a status which are visible for the current user",
                "description": "Returns a collection of all visible tags for the given status, if user is authorized",
                "operationId": "getTagsForStatus",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusTag"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to access this status"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Status"
                ],
                "summary": "Create a StatusTag",
                "description": "Creates a single StatusTag Object, if user is authorized to. <br><br>The key of a tag is free\n     *      text. You can choose it as you need it. However, <b>please use a namespace for tags</b>\n     *      (<i>namespace:xxx</i>) that only affect your own application.<br><br>For tags related to standard actions\n     *      we recommend the following tags in the trwl namespace:<br>\n     *      <ul>\n     *          <li>trwl:seat (i.e. 61)</li>\n     *          <li>trwl:wagon (i.e. 25)</li>\n     *          <li>trwl:ticket (i.e. BahnCard 100 first))</li>\n     *          <li>trwl:travel_class (i.e. 1, 2, business, economy, ...)</li>\n     *          <li>trwl:locomotive_class (BR424, BR450)</li>\n     *          <li>trwl:wagon_class (i.e. Bpmz)</li>\n     *          <li>trwl:role (i.e. Tf, Zf, Gf, Lokführer, conducteur de train, ...)</li>\n     *          <li>trwl:vehicle_number (i.e. 425 001, Tz9001, 123, ...)</li>\n     *          <li>trwl:passenger_rights (i.e. yes / no / ID of claim)</li>\n     *      </ul>",
                "operationId": "createSingleStatusTag",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StatusTag"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/StatusTag"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/statuses/{statusIds}/tags": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Show all tags for multiple statuses which are visible for the current user",
                "description": "Returns a collection of all visible tags for the given statuses, if user is authorized",
                "operationId": "getTagsForMultipleStatuses",
                "parameters": [
                    {
                        "name": "statusIds",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "string"
                        },
                        "example": "1337,4711"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "1337": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/StatusTag"
                                                    }
                                                },
                                                "4711": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/StatusTag"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User not authorized to access this"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/status/{statusId}/tags/{tagKey}": {
            "put": {
                "tags": [
                    "Status"
                ],
                "summary": "Update a StatusTag",
                "description": "Updates a single StatusTag Object, if user is authorized to",
                "operationId": "updateSingleStatusTag",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    },
                    {
                        "name": "tagKey",
                        "in": "path",
                        "description": "Key of StatusTag",
                        "schema": {
                            "type": "string"
                        },
                        "example": "seat"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StatusTag"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/StatusTag"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No status found for this id"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Status"
                ],
                "summary": "Destroy a StatusTag",
                "description": "Deletes a single StatusTag Object, if user is authorized to",
                "operationId": "destroySingleStatusTag",
                "parameters": [
                    {
                        "name": "statusId",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    },
                    {
                        "name": "tagKey",
                        "in": "path",
                        "description": "Key of StatusTag",
                        "schema": {
                            "type": "string"
                        },
                        "example": "trwl:seat"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No status found for this id and statusId"
                    },
                    "403": {
                        "description": "User not authorized to manipulate this status"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/station/{id}/departures": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Get departures from a station",
                "description": "Get departures from a station.",
                "operationId": "getDepartures",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Träwelling-ID of the station (you can look this up with [trainStationAutocomplete](#/Checkin/trainStationAutocomplete))",
                        "required": true
                    },
                    {
                        "name": "when",
                        "in": "query",
                        "description": "When to get the departures (default: now). If you omit the timezone, the datetime is interpreted as localtime. This is especially helpful when träwelling abroad.",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-01-01T12:00:00.000Z"
                        }
                    },
                    {
                        "name": "travelType",
                        "in": "query",
                        "description": "Means of transport (default: all)",
                        "required": false,
                        "schema": {
                            "$ref": "#/components/schemas/TravelType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "description": "HAFAS Train model. This model might be subject to unexpected changes. See also external documentation at [https://v5.db.transport.rest/api.html#get-stopsiddepartures](https://v5.db.transport.rest/api.html#get-stopsiddepartures).",
                                                "externalDocs": "https://v5.db.transport.rest/api.html#get-stopsiddepartures",
                                                "example": {
                                                    "tripId": "1|200513|0|81|6012023",
                                                    "stop": {
                                                        "type": "stop",
                                                        "id": "8000191",
                                                        "name": "Karlsruhe Hbf",
                                                        "location": {
                                                            "type": "location",
                                                            "id": "8000191",
                                                            "latitude": 48.99353,
                                                            "longitude": 8.401939
                                                        },
                                                        "products": {
                                                            "nationalExpress": true,
                                                            "national": true,
                                                            "regionalExp": true,
                                                            "regional": true,
                                                            "suburban": true,
                                                            "bus": true,
                                                            "ferry": false,
                                                            "subway": false,
                                                            "tram": true,
                                                            "taxi": true
                                                        }
                                                    },
                                                    "when": "2023-01-06T13:49:00+01:00",
                                                    "plannedWhen": "2023-01-06T13:49:00+01:00",
                                                    "delay": null,
                                                    "platform": "2",
                                                    "plannedPlatform": "2",
                                                    "direction": "Zürich HB",
                                                    "provenance": null,
                                                    "line": {
                                                        "type": "line",
                                                        "id": "ec-9",
                                                        "fahrtNr": "9",
                                                        "name": "EC 9",
                                                        "public": true,
                                                        "adminCode": "80____",
                                                        "productName": "EC",
                                                        "mode": "train",
                                                        "product": "national",
                                                        "operator": {
                                                            "type": "operator",
                                                            "id": "db-fernverkehr-ag",
                                                            "name": "DB Fernverkehr AG"
                                                        }
                                                    },
                                                    "remarks": null,
                                                    "origin": null,
                                                    "destination": {
                                                        "type": "stop",
                                                        "id": "8503000",
                                                        "name": "Zürich HB",
                                                        "location": {
                                                            "type": "location",
                                                            "id": "8503000",
                                                            "latitude": 47.378177,
                                                            "longitude": 8.540211
                                                        },
                                                        "products": {
                                                            "nationalExpress": true,
                                                            "national": true,
                                                            "regionalExp": true,
                                                            "regional": true,
                                                            "suburban": true,
                                                            "bus": true,
                                                            "ferry": false,
                                                            "subway": false,
                                                            "tram": true,
                                                            "taxi": false
                                                        }
                                                    },
                                                    "currentTripPosition": {
                                                        "type": "location",
                                                        "latitude": 48.725382,
                                                        "longitude": 8.142888
                                                    },
                                                    "loadFactor": "high",
                                                    "station": {
                                                        "id": 5181,
                                                        "ibnr": 8000191,
                                                        "rilIdentifier": "RK",
                                                        "name": "Karlsruhe Hbf",
                                                        "latitude": "48.993530",
                                                        "longitude": "8.401939"
                                                    }
                                                }
                                            }
                                        },
                                        "meta": {
                                            "properties": {
                                                "station": {
                                                    "$ref": "#/components/schemas/Station"
                                                },
                                                "times": {
                                                    "properties": {
                                                        "now": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T12:00:00.000Z"
                                                        },
                                                        "prev": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T11:45:00.000Z"
                                                        },
                                                        "next": {
                                                            "type": "string",
                                                            "format": "date-time",
                                                            "example": "2020-01-01T12:15:00.000Z"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Station not found"
                    },
                    "422": {
                        "description": "Invalid input"
                    },
                    "502": {
                        "description": "Error with our data provider"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/trains/trip": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Get the stopovers and trip information for a given train",
                "operationId": "getTrainTrip",
                "parameters": [
                    {
                        "name": "hafasTripId",
                        "in": "query",
                        "description": "HAFAS trip ID (fetched from departures)",
                        "required": true,
                        "example": "1|323306|1|80|17072022"
                    },
                    {
                        "name": "lineName",
                        "in": "query",
                        "description": "line name for that train",
                        "required": true,
                        "example": "S 4"
                    },
                    {
                        "name": "start",
                        "in": "query",
                        "description": "start point from where the stopovers should be desplayed",
                        "required": true,
                        "example": 4711
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "properties": {
                                                "id": {
                                                    "type": "integer",
                                                    "example": 1
                                                },
                                                "category": {
                                                    "$ref": "#/components/schemas/HafasTravelType"
                                                },
                                                "number": {
                                                    "type": "string",
                                                    "example": "4-a6s4-4"
                                                },
                                                "lineName": {
                                                    "type": "string",
                                                    "example": "S 4"
                                                },
                                                "journeyNumber": {
                                                    "type": "integer",
                                                    "example": "34427"
                                                },
                                                "origin": {
                                                    "$ref": "#/components/schemas/Station"
                                                },
                                                "destination": {
                                                    "$ref": "#/components/schemas/Station"
                                                },
                                                "stopovers": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/StopoverResource"
                                                    }
                                                }
                                            },
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No station found"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/trains/station/nearby": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Location based search for stations",
                "description": "Returns the nearest station to the given coordinates",
                "operationId": "trainStationsNearby",
                "parameters": [
                    {
                        "name": "latitude",
                        "in": "query",
                        "description": "latitude",
                        "required": true,
                        "example": 48.991
                    },
                    {
                        "name": "longitude",
                        "in": "query",
                        "description": "longitude",
                        "required": true,
                        "example": 8.4005
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Station"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No station found"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/trains/checkin": {
            "post": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Create a checkin",
                "operationId": "createTrainCheckin",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CheckinRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CheckinSuccessResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "409": {
                        "description": "Checkin collision"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/station/{id}/home": {
            "put": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Set a station as home station",
                "operationId": "setHomeStation",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Träwelling-ID of the station",
                        "required": true,
                        "example": 1234
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Station"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Station not found"
                    },
                    "500": {
                        "description": "Unknown error"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/trains/station/autocomplete/{query}": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "Autocomplete for stations",
                "description": "This request returns an array of max. 10 station objects matching the query. **CAUTION:** All\n     *      slashes (as well as encoded to %2F) in {query} need to be replaced, preferrably by a space (%20)",
                "operationId": "trainStationAutocomplete",
                "parameters": [
                    {
                        "name": "query",
                        "in": "path",
                        "description": "station query",
                        "example": "Karls"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StationResource"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "503": {
                        "description": "There has been an error with our data provider"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/trains/station/history": {
            "get": {
                "tags": [
                    "Checkin"
                ],
                "summary": "History for stations",
                "description": "This request returns an array of max. 10 most recent station objects that the user has arrived\n     *      at.",
                "operationId": "trainStationHistory",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Station"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "create-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/settings/account": {
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Delete User Account",
                "description": "Deletes the Account for the user and all posts created by it",
                "operationId": "deleteUserAccount",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "confirmation": {
                                        "title": "confirmation",
                                        "description": "Username of the to be deleted account (needs to match the currently logged in\n     *                  user)",
                                        "example": "Gertrud123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "409": {
                        "description": "Conflict. This should not happen but it tries to prevent a 500."
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized to do this action"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "extra-delete"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{username}/statuses": {
            "get": {
                "tags": [
                    "User",
                    "Status"
                ],
                "summary": "[Auth optional] Get paginated statuses for single user",
                "description": "Returns paginated statuses of a single user specified by the username",
                "operationId": "getStatusesForUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/StatusResource"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden, User is blocked"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "[Auth optional] Get information for single user",
                "description": "Returns general information, metadata and statistics for a user",
                "operationId": "showUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "403": {
                        "description": "Forbidden, User is blocked"
                    },
                    "404": {
                        "description": "User not found"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-statuses"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{id}/block": {
            "post": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Block a user",
                "description": "Block a specific user. That user will not be able to see your statuses or profile information,\n     *      and cannot send you follow requests. Public statuses are still visible through the incognito mode.",
                "operationId": "createBlock",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-blocked user",
                                        "format": "int",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "User is already blocked"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-block"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Unmute a user",
                "description": "Unblock a specific user. They are now able to see your statuses and profile information again,\n     *      and send you follow requests.",
                "operationId": "destroyBlock",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userId": {
                                        "title": "userId",
                                        "description": "ID of the to-be-unblocked user",
                                        "format": "int",
                                        "example": 1
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "403": {
                        "description": "User not authorized"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "409": {
                        "description": "User is not blocked"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-block"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/{id}/mute": {
            "post": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Mute a user",
                "description": "Mute a specific user. That way they will not be shown on your dashboard and in the active\n     *      journeys tab",
                "operationId": "createMute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "409": {
                        "description": "User is already muted"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-block"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "User/Hide and Block"
                ],
                "summary": "Unmute a user",
                "description": "Unmute a specific user. That way they will be shown on your dashboard and in the active\n     *      journeys tab again",
                "operationId": "destroyMute",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/User"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Not logged in"
                    },
                    "409": {
                        "description": "User is not muted"
                    },
                    "403": {
                        "description": "User not authorized"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "write-block"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/user/search/{query}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get paginated statuses for single user",
                "description": "Returns paginated statuses of a single user specified by the username",
                "operationId": "searchUsers",
                "parameters": [
                    {
                        "name": "query",
                        "in": "path",
                        "description": "username",
                        "example": "Gertrud123"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "description": "Page of pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            }
                                        },
                                        "links": {
                                            "$ref": "#/components/schemas/Links"
                                        },
                                        "meta": {
                                            "$ref": "#/components/schemas/PaginationMeta"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    }
                },
                "security": [
                    {
                        "passport": [
                            "read-search"
                        ]
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/webhooks": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get webhooks for current user and current application",
                "description": "Returns all webhooks which are created for the current user and which the current authorized applicaton has access to.",
                "operationId": "getWebhooks",
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Webhook"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        },
        "/webhooks/{id}": {
            "get": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Get single webhook",
                "description": "Returns a single webhook Object, if user and application is authorized to see it",
                "operationId": "getSingleWebhook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Webhook-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "data": {
                                            "$ref": "#/components/schemas/Webhook"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No webhook found or unauthorized for this id"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Webhooks"
                ],
                "summary": "Delete a webhook if the user and application are authorized to do",
                "description": "",
                "operationId": "deleteWebhook",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Status-ID",
                        "schema": {
                            "type": "integer"
                        },
                        "example": 1337
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "404": {
                        "description": "No webhook found for this id"
                    },
                    "403": {
                        "description": "User or application not authorized to delete this webhook"
                    }
                },
                "security": [
                    {
                        "passport": []
                    },
                    {
                        "token": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Coordinate": {
                "title": "Coordinate",
                "description": "GeoJson Coordinates",
                "properties": {
                    "type": {
                        "type": "number",
                        "format": "float",
                        "example": "Feature"
                    },
                    "properties": {
                        "type": "object",
                        "example": "{}"
                    },
                    "geometry": {
                        "properties": {
                            "type": {
                                "type": "string",
                                "example": "Point"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "example": "[8.39767,49.01625]"
                                }
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Coordinate"
                }
            },
            "FeatureCollection": {
                "title": "FeatureCollection",
                "description": "featurecollection of multiple GeoJson points",
                "properties": {
                    "type": {
                        "title": "type",
                        "type": "string",
                        "example": "FeatureCollection"
                    },
                    "features": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Coordinate"
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "FeatureCollection"
                }
            },
            "LivePointDto": {
                "title": "LivePointDto",
                "description": "All necessary information to calculate live position",
                "properties": {
                    "point": {
                        "$ref": "#/components/schemas/Coordinate"
                    },
                    "polyline": {
                        "$ref": "#/components/schemas/FeatureCollection"
                    },
                    "arrival": {
                        "title": "arrival",
                        "description": "arrival at end of polyline in UNIX time format",
                        "type": "integer",
                        "format": "integer",
                        "example": 1692538680
                    },
                    "departure": {
                        "title": "departure",
                        "description": "departure at start of polyline in UNIX time format",
                        "type": "integer",
                        "format": "integer",
                        "example": 1692538740
                    },
                    "lineName": {
                        "title": "lineName",
                        "description": "name of line",
                        "type": "string",
                        "format": "string",
                        "example": "ICE 123"
                    },
                    "statusId": {
                        "title": "statusId",
                        "description": "ID of status",
                        "type": "integer",
                        "format": "int",
                        "example": 12345,
                        "deprecated": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LivePointDto"
                }
            },
            "MentionDto": {
                "title": "Mention",
                "description": "Mentioned user and position in status body",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "position": {
                        "title": "position",
                        "type": "integer",
                        "format": "int",
                        "example": 0
                    },
                    "length": {
                        "title": "length",
                        "type": "integer",
                        "format": "integer",
                        "example": 4
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Mention"
                }
            },
            "Station": {
                "title": "Station",
                "description": "train station model",
                "properties": {
                    "id": {
                        "title": "id",
                        "description": "id",
                        "type": "integer",
                        "example": "4711"
                    },
                    "name": {
                        "title": "name",
                        "description": "name of the station",
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    },
                    "latitude": {
                        "title": "latitude",
                        "description": "latitude of the station",
                        "type": "number",
                        "format": "float",
                        "example": "48.991591"
                    },
                    "longitude": {
                        "title": "longitude",
                        "description": "longitude of the station",
                        "type": "number",
                        "format": "float",
                        "example": "8.400538"
                    },
                    "ibnr": {
                        "title": "ibnr",
                        "description": "IBNR of the station",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "rilIdentifier": {
                        "title": "rilIdentifier",
                        "description": "Identifier specified in 'Richtline 100' of the Deutsche Bahn",
                        "type": "string",
                        "example": "RK",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Station"
                }
            },
            "Business": {
                "title": "Business",
                "description": "What type of travel (0=private, 1=business, 2=commute) did the user specify?",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2
                ],
                "example": 0
            },
            "HafasTravelType": {
                "title": "category",
                "description": "Category of transport. ",
                "type": "string",
                "enum": [
                    "nationalExpress",
                    "national",
                    "regionalExp",
                    "regional",
                    "suburban",
                    "bus",
                    "ferry",
                    "subway",
                    "tram",
                    "taxi",
                    "plane"
                ],
                "example": "suburban"
            },
            "MapProvider": {
                "title": "MapProvider",
                "description": "What type of map provider (cargo, open-railway-map) did the user specify?",
                "type": "string",
                "enum": [
                    "cargo",
                    "open-railway-map"
                ],
                "example": "cargo"
            },
            "MastodonVisibility": {
                "title": "visibility",
                "description": "What type of visibility (0=public, 1=unlisted, 2=followers, 3=private) did the user specify for\n *     future posts to Mastodon? Some instances such as chaos.social discourage bot posts on public timelines.",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3
                ],
                "example": 1
            },
            "PointReason": {
                "title": "PointsReason",
                "description": "What is the reason for the points calculation factor? (0=in time => 100%, 1=good enough => 25%, 2=not sufficient (1 point), 3=forced => no points)",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "example": 1
            },
            "StatusVisibility": {
                "title": "visibility",
                "description": "What type of visibility (0=public, 1=unlisted, 2=followers, 3=private, 4=authenticated) did the\n *      user specify?",
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                ],
                "example": 0
            },
            "TravelType": {
                "title": "travelType",
                "type": "string",
                "enum": [
                    "express",
                    "regional",
                    "suburban",
                    "bus",
                    "ferry",
                    "subway",
                    "tram",
                    "taxi",
                    "plane"
                ],
                "example": "suburban"
            },
            "CheckinSuccessResource": {
                "title": "CheckinResponse",
                "properties": {
                    "status": {
                        "$ref": "#/components/schemas/StatusResource"
                    },
                    "points": {
                        "$ref": "#/components/schemas/Points"
                    },
                    "alsoOnThisconnection": {
                        "description": "Statuses of other people on this connection",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StatusResource"
                        }
                    }
                },
                "type": "object"
            },
            "ClientResource": {
                "title": "Client",
                "properties": {
                    "id": {
                        "description": "Model -> OAuthClient",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "type": "string",
                        "example": "Träwelling App"
                    },
                    "privacyPolicyUrl": {
                        "type": "string",
                        "example": "https://traewelling.de/privacy-policy"
                    }
                },
                "type": "object"
            },
            "EventDetailsResource": {
                "title": "EventDetails",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 39
                    },
                    "slug": {
                        "type": "string",
                        "example": "9_euro_ticket"
                    },
                    "trainDistance": {
                        "type": "integer",
                        "example": 12345
                    },
                    "trainDuration": {
                        "type": "integer",
                        "example": 12345
                    }
                },
                "type": "object"
            },
            "EventResource": {
                "title": "Event",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 39
                    },
                    "name": {
                        "type": "string",
                        "example": "9-Euro-Ticket"
                    },
                    "slug": {
                        "type": "string",
                        "example": "9_euro_ticket"
                    },
                    "hashtag": {
                        "type": "string",
                        "example": "NeunEuroTicket"
                    },
                    "host": {
                        "type": "string",
                        "example": "9-Euro-Ticket GmbH"
                    },
                    "url": {
                        "type": "string",
                        "example": "https://9-euro-ticket.de"
                    },
                    "begin": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-01T00:00:00+00:00"
                    },
                    "end": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-01-02T00:00:00+00:00"
                    },
                    "station": {
                        "$ref": "#/components/schemas/Station"
                    }
                },
                "type": "object"
            },
            "LeaderboardUserResource": {
                "title": "LeaderboardUserResource",
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/LightUserResource"
                    },
                    "totalDuration": {
                        "description": "duration travelled in minutes",
                        "type": "integer",
                        "example": 6
                    },
                    "totalDistance": {
                        "description": "distance travelled in meters",
                        "type": "integer",
                        "example": 12345
                    },
                    "points": {
                        "description": "points of user",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LightUserResource": {
                "title": "LightUser",
                "description": "User model with just basic information",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "displayName": {
                        "type": "string",
                        "example": "Gertrud"
                    },
                    "username": {
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "mastodonUrl": {
                        "type": "string",
                        "example": "https://traewelling.social/@Gertrud123"
                    },
                    "preventIndex": {
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object"
            },
            "OperatorResource": {
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 1
                    },
                    "identifier": {
                        "type": "string",
                        "example": "db-regio-ag-nord"
                    },
                    "name": {
                        "type": "string",
                        "example": "DB Regio AG Nord"
                    }
                },
                "type": "object"
            },
            "StationResource": {
                "title": "Station",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "name": {
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    },
                    "latitude": {
                        "type": "number",
                        "example": "48.993207"
                    },
                    "longitude": {
                        "type": "number",
                        "example": "8.400977"
                    },
                    "ibnr": {
                        "type": "string",
                        "example": "8000191"
                    },
                    "rilIdentifier": {
                        "type": "string",
                        "example": "RK"
                    }
                },
                "type": "object"
            },
            "StatusResource": {
                "title": "Status",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 12345
                    },
                    "body": {
                        "description": "User defined status text",
                        "example": "Hello world!"
                    },
                    "bodyMentions": {
                        "description": "Mentions in the status body",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MentionDto"
                        }
                    },
                    "business": {
                        "$ref": "#/components/schemas/Business"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    },
                    "likes": {
                        "description": "How many people have liked this status",
                        "type": "integer",
                        "example": 12
                    },
                    "liked": {
                        "description": "Did the currently authenticated user like this status? (if unauthenticated = false)",
                        "type": "boolean",
                        "example": true
                    },
                    "isLikable": {
                        "description": "Do the author of this status and the currently authenticated user allow liking of statuses? Only show the like UI if set to true",
                        "type": "boolean",
                        "example": true
                    },
                    "client": {
                        "$ref": "#/components/schemas/ClientResource"
                    },
                    "createdAt": {
                        "description": "creation date of this status",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-07-17T13:37:00+02:00"
                    },
                    "train": {
                        "$ref": "#/components/schemas/TransportResource"
                    },
                    "event": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/EventResource"
                            }
                        ],
                        "nullable": true
                    },
                    "userDetails": {
                        "$ref": "#/components/schemas/LightUserResource"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/StatusTagResource"
                        }
                    }
                },
                "type": "object"
            },
            "StatusTagResource": {
                "title": "StatusTagResource",
                "properties": {
                    "key": {
                        "type": "string",
                        "example": "trwl:vehicle_number"
                    },
                    "value": {
                        "type": "string",
                        "example": "94 80 0450 921 D-AVG"
                    },
                    "visibility": {
                        "type": "integer",
                        "example": "1"
                    }
                },
                "type": "object"
            },
            "StopoverResource": {
                "title": "StopoverResource",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": 12345
                    },
                    "name": {
                        "description": "name of the station",
                        "type": "string",
                        "example": "Karlsruhe Hbf"
                    },
                    "rilIdentifier": {
                        "description": "Identifier specified in 'Richtline 100' of the Deutsche Bahn",
                        "type": "string",
                        "example": "RK",
                        "nullable": true
                    },
                    "evaIdentifier": {
                        "description": "IBNR identifier of Deutsche Bahn",
                        "type": "string",
                        "example": "8000191",
                        "nullable": true
                    },
                    "arrival": {
                        "description": "currently known arrival time. Equal to arrivalReal if known. Else equal to arrivalPlanned.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "arrivalPlanned": {
                        "description": "planned arrival according to timetable records",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "arrivalReal": {
                        "description": "real arrival according to live data",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "arrivalPlatformPlanned": {
                        "description": "planned arrival platform according to timetable records",
                        "type": "string",
                        "example": "5",
                        "nullable": true
                    },
                    "arrivalPlatformReal": {
                        "description": "real arrival platform according to live data",
                        "type": "string",
                        "example": "5 A-F",
                        "nullable": true
                    },
                    "departure": {
                        "description": "currently known departure time. Equal to departureReal if known. Else equal to departurePlanned.",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "departurePlanned": {
                        "description": "planned departure according to timetable records",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "departureReal": {
                        "description": "real departure according to live data",
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "departurePlatformPlanned": {
                        "description": "planned departure platform according to timetable records",
                        "type": "string",
                        "example": "5",
                        "nullable": true
                    },
                    "departurePlatformReal": {
                        "description": "real departure platform according to live data",
                        "type": "string",
                        "example": "5 A-F",
                        "nullable": true
                    },
                    "platform": {
                        "type": "string",
                        "example": "5 A-F",
                        "nullable": true
                    },
                    "isArrivalDelayed": {
                        "description": "Is there a delay in the arrival time?",
                        "type": "boolean",
                        "example": false
                    },
                    "isDepartureDelayed": {
                        "description": "Is there a delay in the departure time?",
                        "type": "boolean",
                        "example": false
                    },
                    "cancelled": {
                        "description": "is this stopover cancelled?",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object"
            },
            "TransportResource": {
                "title": "TransportResource",
                "properties": {
                    "trip": {
                        "type": "integer",
                        "example": "4711"
                    },
                    "hafasId": {
                        "type": "string",
                        "example": "1|1234|567"
                    },
                    "category": {
                        "$ref": "#/components/schemas/HafasTravelType"
                    },
                    "number": {
                        "description": "Internal number of the journey",
                        "example": "4-a6s8-8"
                    },
                    "lineName": {
                        "type": "string",
                        "example": "S 1"
                    },
                    "journeyNumber": {
                        "type": "integer",
                        "example": 85639
                    },
                    "distance": {
                        "description": "Distance in meters",
                        "type": "integer",
                        "example": 10000
                    },
                    "points": {
                        "type": "integer",
                        "example": 37
                    },
                    "duration": {
                        "description": "Duration in minutes",
                        "type": "integer",
                        "example": 30
                    },
                    "manualDeparture": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "manualArrival": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2022-07-17T13:37:00+02:00",
                        "nullable": true
                    },
                    "origin": {
                        "$ref": "#/components/schemas/StopoverResource"
                    },
                    "destination": {
                        "$ref": "#/components/schemas/StopoverResource"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/OperatorResource"
                    }
                },
                "type": "object"
            },
            "UserAuthResource": {
                "title": "UserAuth",
                "properties": {
                    "id": {
                        "type": "integer",
                        "example": "1"
                    },
                    "displayName": {
                        "type": "string",
                        "example": "Gertrud"
                    },
                    "username": {
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "type": "string",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "totalDistance": {
                        "type": "integer",
                        "example": "100"
                    },
                    "totalDuration": {
                        "type": "integer",
                        "example": "100"
                    },
                    "points": {
                        "type": "integer",
                        "example": "100"
                    },
                    "mastodonUrl": {
                        "type": "string",
                        "example": "https://mastodon.social/@Gertrud123",
                        "nullable": true
                    },
                    "privateProfile": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "preventIndex": {
                        "type": "boolean",
                        "example": "false"
                    },
                    "likes_enabled": {
                        "type": "boolean",
                        "example": "true"
                    },
                    "home": {
                        "$ref": "#/components/schemas/StationResource"
                    },
                    "language": {
                        "type": "string",
                        "example": "de"
                    },
                    "defaultStatusVisibility": {
                        "type": "integer",
                        "example": 0
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "admin",
                            "open-beta",
                            "closed-beta"
                        ]
                    }
                },
                "type": "object"
            },
            "BearerTokenResponse": {
                "title": "BearerTokenResponse",
                "properties": {
                    "token": {
                        "title": "token",
                        "description": "Bearer Token. Use in Authentication-Header with prefix 'Bearer '. (space is needed)",
                        "type": "string",
                        "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZWU2ZWZiOWUxYTIwN2FmMjZjNjk4NjVkOTA5ODNmNzFjYzYyMzE5ODA3NGU1NjlhNjU1MGRiMTdhMWY5YmNhMmY4ZjNjNTQ4ZGZkZTY5ZmUiLCJpYXQiOjE2NjYxODUzMDYuOTczODU3LCJuYmYiOjE2NjYxODUzMDYuOTczODYsImV4cCI6MTY5NzcyMTMwNi45NDYyNDgsInN1YiI6IjEiLCJzY29wZXMiOltdfQ.tiv8VeL8qw6BRwo5QZZ71Zn3WnFJjtvVciahiUJjzVNfqgofdRF6EoWrTFc_WmrgbVCdfXBjBI02fjbSrsD4....."
                    },
                    "expires_at": {
                        "title": "slug",
                        "description": "end of life for this token. Lifespan is usually one year.",
                        "type": "string",
                        "example": "2023-10-19T15:15:06+02:00"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "BearerTokenResponse"
                }
            },
            "CheckinRequestBody": {
                "title": "CheckinRequestBody",
                "description": "Fields for creating a train checkin",
                "properties": {
                    "body": {
                        "title": "body",
                        "description": "Text that should be added to the post",
                        "type": "string",
                        "maxLength": 280,
                        "example": "Meine erste Fahrt nach Knuffingen!",
                        "nullable": true
                    },
                    "business": {
                        "$ref": "#/components/schemas/Business"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    },
                    "eventId": {
                        "title": "eventId",
                        "description": "Id of an event the status should be connected to",
                        "type": "integer",
                        "nullable": true
                    },
                    "toot": {
                        "title": "toot",
                        "description": "Should this status be posted to mastodon?",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    },
                    "chainPost": {
                        "title": "chainPost",
                        "description": "Should this status be posted to mastodon as a chained post?",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    },
                    "ibnr": {
                        "title": "ibnr",
                        "description": "If true, the `start` and `destination` properties can be supplied as an ibnr. Otherwise they\n     *     should be given as the Träwelling-ID. Default behavior is `false`.",
                        "type": "boolean",
                        "example": "true",
                        "nullable": true
                    },
                    "tripId": {
                        "title": "tripId",
                        "description": "The HAFAS tripId for the to be checked in train",
                        "example": "1|323306|1|80|17072022"
                    },
                    "lineName": {
                        "title": "lineName",
                        "description": "The line name for the to be checked in train",
                        "example": "S 4"
                    },
                    "start": {
                        "title": "start",
                        "description": "The Station-ID of the starting point (see `ibnr`)",
                        "type": "integer",
                        "example": "8000191"
                    },
                    "destination": {
                        "title": "destination",
                        "description": "The Station-ID of the destination (see `ibnr`)",
                        "type": "integer",
                        "example": "8079045"
                    },
                    "departure": {
                        "title": "departure",
                        "description": "Timestamp of the departure",
                        "example": "2022-12-19T20:41:00+01:00"
                    },
                    "arrival": {
                        "title": "arrival",
                        "description": "Timestamp of the arrival",
                        "example": "2022-12-19T20:42:00+01:00"
                    },
                    "force": {
                        "title": "force",
                        "description": "If true, the checkin will be created, even if a colliding checkin exists. No points will be\n     *     awarded.",
                        "type": "boolean",
                        "example": "false",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "CheckinRequestBody"
                }
            },
            "EventSuggestion": {
                "title": "EventSuggestion",
                "description": "Fields for suggesting an event",
                "properties": {
                    "name": {
                        "title": "name",
                        "description": "name of the event",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Eröffnung der Nebenbahn in Knuffingen"
                    },
                    "host": {
                        "title": "host",
                        "description": "host of the event",
                        "type": "string",
                        "example": "MiWuLa",
                        "nullable": true
                    },
                    "begin": {
                        "title": "begin",
                        "description": "Timestamp for the start of the event",
                        "example": "2022-06-01T00:00:00+02:00"
                    },
                    "end": {
                        "title": "end",
                        "description": "Timestamp for the end of the event",
                        "example": "2022-08-31T23:59:00+02:00"
                    },
                    "url": {
                        "title": "url",
                        "description": "external URL for this event",
                        "type": "string",
                        "maxLength": 255,
                        "example": "https://www.bundesregierung.de/breg-de/aktuelles/faq-9-euro-ticket-2028756",
                        "nullable": true
                    },
                    "hashtag": {
                        "title": "hashtag",
                        "description": "hashtag for this event",
                        "type": "string",
                        "maxLength": 40,
                        "example": "gpn21",
                        "nullable": true
                    },
                    "nearestStation": {
                        "title": "nearestStation",
                        "description": "Query string for the nearest station to this event",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Berlin Hbf",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "EventSuggestion"
                }
            },
            "Links": {
                "title": "Links",
                "description": "pagination links",
                "properties": {
                    "first": {
                        "title": "first",
                        "description": "URL to first page of this pagination",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=1",
                        "nullable": true
                    },
                    "last": {
                        "title": "last",
                        "description": "URL to last page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": null,
                        "nullable": true
                    },
                    "prev": {
                        "title": "prev",
                        "description": "URL to previous page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=1",
                        "nullable": true
                    },
                    "next": {
                        "title": "next",
                        "description": "URL to next page of this pagination (mostly null)",
                        "type": "string",
                        "format": "uri",
                        "example": "https://traewelling.de/api/v1/ENDPOINT?page=2",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Links"
                }
            },
            "PaginationMeta": {
                "title": "Meta",
                "description": "Pagination meta data",
                "properties": {
                    "current_page": {
                        "title": "current_page",
                        "description": "currently displayed page in this pagination",
                        "type": "integer",
                        "example": 2
                    },
                    "from": {
                        "title": "from",
                        "description": "The first element on this page is the nth element of the query",
                        "type": "integer",
                        "example": 16
                    },
                    "path": {
                        "title": "path",
                        "description": "The path of this pagination",
                        "type": "string",
                        "format": "url",
                        "example": "https://traewelling.de/api/v1/ENDPOINT"
                    },
                    "per_page": {
                        "title": "per_page",
                        "description": "the amount of items per page in this pagination",
                        "type": "integer",
                        "example": 15
                    },
                    "to": {
                        "title": "to",
                        "description": "The last element on this page is the nth element of the query",
                        "type": "integer",
                        "example": 30
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PaginationMeta"
                }
            },
            "LikeResponse": {
                "title": "LikeResponse",
                "properties": {
                    "count": {
                        "title": "count",
                        "description": "Amount of likes",
                        "type": "integer",
                        "format": "int32",
                        "example": 12
                    }
                },
                "type": "object",
                "xml": {
                    "name": "LikeResponse"
                }
            },
            "Notification": {
                "title": "Notification",
                "description": "Notification model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "string",
                        "format": "string",
                        "example": "bb1ba9a5-9c2b-43c3-b8c9-2f70651fc51c"
                    },
                    "type": {
                        "title": "type",
                        "description": "type of notification",
                        "type": "string",
                        "example": "UserJoinedConnection"
                    },
                    "leadFormatted": {
                        "title": "leadFormatted",
                        "description": "the title of notification in html formatted form",
                        "type": "string",
                        "format": "string",
                        "example": "<b>@bob</b> is in your connection!"
                    },
                    "lead": {
                        "title": "lead",
                        "description": "the title of notification in plain text form",
                        "type": "string",
                        "format": "string",
                        "example": "@bob is in your connection!"
                    },
                    "noticeFormatted": {
                        "title": "noticeFormatted",
                        "description": "the body of notification in html formatted form",
                        "type": "string",
                        "format": "string",
                        "example": "@bob is on <b>S 81</b> from <b>Karlsruhe Hbf</b> to <b>Freudenstadt Hbf</b>."
                    },
                    "notice": {
                        "title": "notice",
                        "description": "the body of notification in plain text form",
                        "type": "string",
                        "format": "string",
                        "example": "@bob is on S 81 from Karlsruhe Hbf to Freudenstadt Hbf."
                    },
                    "link": {
                        "title": "link",
                        "description": "the link to the notification",
                        "type": "string",
                        "format": "string",
                        "example": "https://traewelling.de/status/123456"
                    },
                    "data": {
                        "title": "data",
                        "description": "the data of the notification",
                        "type": "array",
                        "items": {
                            "example": {
                                "notice": "every notification type has different data attributes, just try it out"
                            }
                        }
                    },
                    "readAt": {
                        "title": "readAt",
                        "description": "the date when the notification was read, null if not read yet",
                        "type": "string",
                        "format": "string",
                        "example": "2023-01-01T00:00:00+00:00",
                        "nullable": true
                    },
                    "createdAt": {
                        "title": "createdAt",
                        "description": "the date when the notification was created",
                        "type": "string",
                        "format": "string",
                        "example": "2023-01-01T00:00:00+00:00"
                    },
                    "createdAtForHumans": {
                        "title": "createdAtForHumans",
                        "description": "DON'T USE THIS ATTRIBUTE! This Attribute will be removed in the future. The date when the notification was created, but in human readable form",
                        "type": "string",
                        "format": "string",
                        "example": "2 days ago"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Notification"
                }
            },
            "PaginationPage": {
                "title": "PaginationPage",
                "description": "pagination links",
                "xml": {
                    "name": "PaginationPage"
                }
            },
            "Points": {
                "title": "Points",
                "description": "Points model",
                "properties": {
                    "points": {
                        "title": "points",
                        "description": "points",
                        "type": "integer",
                        "format": "int",
                        "example": 1
                    },
                    "calculation": {
                        "$ref": "#/components/schemas/PointsCalculation"
                    },
                    "additional": {
                        "title": "additional",
                        "description": "extra points that can be given",
                        "type": "array",
                        "items": {
                            "example": {
                                "identifier": "extrapoints",
                                "points": 4,
                                "divisibile": false
                            }
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Points"
                }
            },
            "PointsCalculation": {
                "title": "PointsCalculation",
                "properties": {
                    "base": {
                        "title": "base",
                        "description": "Basepoints for this type of vehicle",
                        "type": "number",
                        "format": "float",
                        "example": 0.5
                    },
                    "distance": {
                        "title": "distance",
                        "description": "Points for the travelled distance",
                        "example": 0.25
                    },
                    "factor": {
                        "title": "factor",
                        "example": 0.25
                    },
                    "reason": {
                        "$ref": "#/components/schemas/PointReason"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "PointsCalculation"
                }
            },
            "Polyline": {
                "title": "Polyline",
                "description": "Polyline of a single status as GeoJSON Feature",
                "properties": {
                    "type": {
                        "title": "type",
                        "type": "string",
                        "example": "Feature"
                    },
                    "geometry": {
                        "properties": {
                            "type": {
                                "type": "object",
                                "example": "LineString"
                            },
                            "coordinates": {
                                "type": "array",
                                "items": {
                                    "example": "[[8.39767,49.01625],[8.45947,49.06576],[8.52401,49.01625],[8.39218,48.88729],[8.25759,49.00544],[8.30703,49.07476],[8.39080,49.01535]]"
                                }
                            }
                        },
                        "type": "object"
                    },
                    "properties": {
                        "properties": {
                            "statusId": {
                                "type": "integer",
                                "example": 1337
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Polyline"
                }
            },
            "StatusTag": {
                "title": "StatusTag",
                "description": "StatusTag model",
                "properties": {
                    "key": {
                        "title": "key",
                        "description": "Key of tag",
                        "type": "string",
                        "example": "trwl:ticket"
                    },
                    "value": {
                        "title": "value",
                        "description": "Value of tag",
                        "type": "string",
                        "example": "BahnCard 100"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StatusTag"
                }
            },
            "SuccessResponse": {
                "title": "SuccessResponse",
                "description": "Success Response",
                "properties": {
                    "status": {
                        "title": "status",
                        "description": "status",
                        "type": "string",
                        "example": "success"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "SuccessResponse"
                }
            },
            "User": {
                "title": "User",
                "description": "User model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int",
                        "example": 1
                    },
                    "displayName": {
                        "title": "displayName",
                        "description": "Display name of the user",
                        "example": "Gertrud"
                    },
                    "username": {
                        "title": "username",
                        "description": "username of user",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "profilePicture": {
                        "title": "profilePicture",
                        "description": "URL of the profile picture of the user",
                        "type": "integer",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "trainDistance": {
                        "title": "trainDistance",
                        "description": "distance travelled by train in meters",
                        "type": "integer",
                        "format": "int",
                        "example": 12345
                    },
                    "trainDuration": {
                        "title": "trainDuration",
                        "description": "duration travelled by train in minutes",
                        "type": "integer",
                        "format": "int",
                        "example": 6
                    },
                    "points": {
                        "title": "points",
                        "description": "Current points of the last 7 days",
                        "type": "integer",
                        "format": "int",
                        "example": 300
                    },
                    "mastodonUrl": {
                        "title": "mastodonUrl",
                        "description": "URL to the Mastodon profile of the user",
                        "type": "string",
                        "example": "https://chaos.social/@traewelling",
                        "nullable": true
                    },
                    "privateProfile": {
                        "title": "privateProfile",
                        "description": "is this profile set to private?",
                        "type": "boolean",
                        "example": false
                    },
                    "likes_enabled": {
                        "title": "likes_enabled",
                        "description": "Does this profile allow likes? Only offer the UI to like any status if this setting is set to true. If set to false, the likes API will return 403.",
                        "type": "boolean",
                        "example": true
                    },
                    "userInvisibleToMe": {
                        "title": "userInvisibleToMe",
                        "description": "Can the currently authenticated user see the statuses of this user?",
                        "type": "boolean",
                        "example": false
                    },
                    "muted": {
                        "title": "muted",
                        "description": "Is this user muted by the currently authenticated user?",
                        "type": "boolean",
                        "example": false
                    },
                    "following": {
                        "title": "following",
                        "description": "Does the currently authenticated user follow this user?",
                        "type": "boolean",
                        "example": false
                    },
                    "followPending": {
                        "title": "followPending",
                        "description": "Is there a currently pending follow request?",
                        "type": "boolean",
                        "example": false
                    },
                    "preventIndex": {
                        "title": "preventIndex",
                        "description": "Did the user choose to prevent search engines from indexing their profile?",
                        "type": "boolean",
                        "example": false
                    }
                },
                "type": "object",
                "xml": {
                    "name": "User"
                }
            },
            "UserProfileSettings": {
                "title": "UserProfileSettings",
                "description": "Model for all user profile settings",
                "properties": {
                    "username": {
                        "title": "username",
                        "description": "username",
                        "type": "string",
                        "example": "Gertrud123"
                    },
                    "displayName": {
                        "title": "displayName",
                        "description": "Display name of the user",
                        "example": "Gertrud"
                    },
                    "profilePicture": {
                        "title": "profilePicture",
                        "description": "URL of the profile picture of the user",
                        "type": "integer",
                        "example": "https://traewelling.de/@Gertrud123/picture"
                    },
                    "privateProfile": {
                        "title": "privateProfile",
                        "description": "Is the profile private?",
                        "type": "boolean",
                        "format": "boolean",
                        "example": false
                    },
                    "preventIndex": {
                        "title": "preventIndex",
                        "description": "Did the user choose to prevent search engines from indexing their profile?",
                        "type": "boolean",
                        "format": "boolean",
                        "example": false
                    },
                    "defaultStatusVisibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    },
                    "privacyHideDays": {
                        "title": "privacyHideDays",
                        "description": "Number of days after which a status is hidden from the public",
                        "format": "int",
                        "example": 1,
                        "nullable": true
                    },
                    "password": {
                        "title": "password",
                        "description": "Does the user have a password set?",
                        "type": "boolean",
                        "format": "boolean",
                        "example": true
                    },
                    "email": {
                        "title": "email",
                        "description": "The email address of the user",
                        "type": "string",
                        "example": "gertrud@example.com",
                        "nullable": true
                    },
                    "emailVerified": {
                        "title": "emailVerified",
                        "description": "Is the email address verified?",
                        "type": "boolean",
                        "format": "boolean",
                        "example": "https://chaos.social/@traewelling"
                    },
                    "profilePictureSet": {
                        "title": "profilePictureSet",
                        "description": "Has the user set a profile picture other then the default one?",
                        "type": "boolean",
                        "example": false
                    },
                    "mastodon": {
                        "title": "mastodon",
                        "description": "Mastodon URL of user",
                        "type": "string",
                        "example": "https://chaos.social/@traewelling"
                    },
                    "mastodonVisibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    }
                },
                "type": "object",
                "xml": {
                    "name": "UserProfileSettings"
                }
            },
            "Webhook": {
                "title": "Webhook",
                "description": "Webhook model",
                "properties": {
                    "id": {
                        "title": "ID",
                        "description": "ID",
                        "type": "integer",
                        "format": "int",
                        "example": 12345
                    },
                    "clientId": {
                        "title": "ClientID",
                        "description": "ID of the client which created this webhook",
                        "type": "integer",
                        "format": "int",
                        "example": 12345
                    },
                    "userId": {
                        "title": "UserID",
                        "description": "ID of the user which created this webhook",
                        "type": "integer",
                        "format": "int",
                        "example": 12345
                    },
                    "url": {
                        "title": "url",
                        "description": "URL where the webhook gets sent to",
                        "example": "https://example.com/webhook"
                    },
                    "createdAt": {
                        "title": "createdAt",
                        "description": "creation date of this webhook",
                        "type": "string",
                        "format": "datetime",
                        "example": "2022-07-17T13:37:00+02:00"
                    },
                    "events": {
                        "title": "events",
                        "description": "array of events this webhook receives",
                        "type": "array",
                        "items": {}
                    }
                },
                "type": "object",
                "xml": {
                    "name": "Webhook"
                }
            },
            "StatusUpdateBody": {
                "title": "StatusUpdateBody",
                "description": "Status Update Body",
                "properties": {
                    "body": {
                        "description": "Status-Text to be displayed alongside the checkin",
                        "maxLength": 280,
                        "example": "Wow. This train is extremely crowded!",
                        "nullable": true
                    },
                    "business": {
                        "$ref": "#/components/schemas/Business"
                    },
                    "visibility": {
                        "$ref": "#/components/schemas/StatusVisibility"
                    },
                    "eventId": {
                        "description": "The ID of the event this status is related to - or null",
                        "example": "1",
                        "nullable": true
                    },
                    "manualDeparture": {
                        "description": "Manual departure time set by the user",
                        "format": "date",
                        "example": "2020-01-01 12:00:00",
                        "nullable": true
                    },
                    "manualArrival": {
                        "description": "Manual arrival time set by the user",
                        "format": "date",
                        "example": "2020-01-01 13:00:00",
                        "nullable": true
                    },
                    "destinationId": {
                        "description": "Destination station id",
                        "example": "1",
                        "nullable": true
                    },
                    "destinationArrivalPlanned": {
                        "description": "Destination arrival time",
                        "format": "date",
                        "example": "2020-01-01 13:00:00",
                        "nullable": true
                    }
                },
                "type": "object",
                "xml": {
                    "name": "StatusUpdateBody"
                }
            }
        },
        "parameters": {
            "page": {
                "name": "page",
                "in": "query",
                "description": "Page of pagination",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            }
        },
        "securitySchemes": {
            "passport": {
                "type": "oauth2",
                "description": "OAuth2 authorizationCode Flow. Get your token from https://traewelling.de/settings/applications. Set the redirect URL to https://traewelling.de/api/oauth2-callback to use it here. See also https://laravel.com/docs/9.x/passport",
                "in": "header",
                "scheme": "https",
                "flows": {
                    "authorizationCode": {
                        "authorizationUrl": "http://localhost:8000/oauth/authorize",
                        "tokenUrl": "http://localhost:8000/oauth/token",
                        "refreshUrl": "http://localhost:8000/auth/refresh",
                        "scopes": {
                            "read-statuses": "see all statuses",
                            "read-notifications": "see your notifications",
                            "read-statistics": "see your statistics",
                            "read-search": "search in Träwelling",
                            "write-statuses": "create, edit, delete statuses",
                            "write-likes": "create and remove likes",
                            "write-notifications": "mark notifications as read, clear notifications",
                            "write-exports": "request data exports",
                            "write-follows": "follow and unfollow users",
                            "write-followers": "accept follow requests and remove followers",
                            "write-blocks": "block and unblock users, mute and unmute users",
                            "write-event-suggestions": "suggest events in your name",
                            "write-support-tickets": "create support tickets in your name",
                            "read-settings": "see your settings, email, etc.",
                            "write-settings-profile": "edit your profile",
                            "read-settings-profile": "see your profile data, e.g. email",
                            "write-settings-mail": "edit your email",
                            "write-settings-profile-picture": "edit your profile picture",
                            "write-settings-privacy": "change your privacy settings",
                            "read-settings-followers": "show follow-requests and followers",
                            "write-settings-calendar": "create and delete new calendar-tokens",
                            "extra-write-password": "change your password",
                            "extra-terminate-sessions": "log you out of other sessions and apps",
                            "extra-delete": "delete your account"
                        }
                    }
                }
            },
            "token": {
                "type": "apiKey",
                "description": "Enter token in format \"Bearer \\<token\\>\". You can create your personal access token at https://traewelling.de/settings/applications. We recommend this method for prototyping purposes. For all other use cases please use the oAuth method above.",
                "name": "Authorization",
                "in": "header"
            }
        }
    },
    "tags": [
        {
            "name": "Auth",
            "description": "Logging in, creating Accounts, etc."
        },
        {
            "name": "Checkin",
            "description": "Checkin related endpoints. Regular process is departures -> trip -> checkin"
        },
        {
            "name": "Dashboard",
            "description": "API Endpoints of Dashboard"
        },
        {
            "name": "Events",
            "description": "Events that users can check in to"
        },
        {
            "name": "Notifications",
            "description": "Get notifications and mark them as read or unread"
        },
        {
            "name": "Status",
            "description": "Endpoints for accessing and manipulating Statusses and their additional data"
        },
        {
            "name": "Likes",
            "description": "Likes regarding a single status"
        },
        {
            "name": "User",
            "description": "Information regarding users"
        },
        {
            "name": "User/Follow",
            "description": "Follow and unfollow users, manage your followers"
        },
        {
            "name": "User/Hide and Block",
            "description": "Mute and block users"
        },
        {
            "name": "Leaderboard",
            "description": "Leaderboard related endpoints"
        },
        {
            "name": "Statistics",
            "description": "Statistics related endpoints"
        },
        {
            "name": "Settings",
            "description": "User/Profile-Settings"
        },
        {
            "name": "Webhooks",
            "description": "Manage Webhooks for third party applications"
        }
    ]
}